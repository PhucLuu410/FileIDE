
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006808  08006808  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006808  08006808  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  2000007c  0800688c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  0800688c  0002136c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cbd  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a5  00000000  00000000  00037da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001138  00000000  00000000  0003cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac28  00000000  00000000  0003dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5b8  00000000  00000000  000589a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a977  00000000  00000000  00072f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006110  00000000  00000000  0010d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001139e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006650 	.word	0x08006650

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08006650 	.word	0x08006650

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000098 	.word	0x20000098
 800018c:	20000138 	.word	0x20000138

08000190 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000194:	f000 f8c6 	bl	8000324 <Lcd_configure>
			lcd_write_command(0x33);
 8000198:	2033      	movs	r0, #51	; 0x33
 800019a:	f000 f96b 	bl	8000474 <lcd_write_command>
			lcd_write_command(0x32);
 800019e:	2032      	movs	r0, #50	; 0x32
 80001a0:	f000 f968 	bl	8000474 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 80001a4:	2028      	movs	r0, #40	; 0x28
 80001a6:	f000 f965 	bl	8000474 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 80001aa:	2001      	movs	r0, #1
 80001ac:	f000 f962 	bl	8000474 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001b0:	200c      	movs	r0, #12
 80001b2:	f000 f95f 	bl	8000474 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 80001b6:	2006      	movs	r0, #6
 80001b8:	f000 f95c 	bl	8000474 <lcd_write_command>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4906      	ldr	r1, [pc, #24]	; (80001e8 <Lcd_write_int+0x28>)
 80001d0:	4618      	mov	r0, r3
 80001d2:	f005 fd35 	bl	8005c40 <siprintf>
	Lcd_write_string(buffer);
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 f806 	bl	80001ec <Lcd_write_string>
}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	08006668 	.word	0x08006668

080001ec <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 80001ec:	b590      	push	{r4, r7, lr}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	e009      	b.n	800020e <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f956 	bl	80004b4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	3301      	adds	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	7bfc      	ldrb	r4, [r7, #15]
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ff9d 	bl	8000150 <strlen>
 8000216:	4603      	mov	r3, r0
 8000218:	429c      	cmp	r4, r3
 800021a:	d3ee      	bcc.n	80001fa <Lcd_write_string+0xe>
	}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bd90      	pop	{r4, r7, pc}

08000226 <Lcd_clear_display>:

/**
 * Clear the screen
 */
void Lcd_clear_display(void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f922 	bl	8000474 <lcd_write_command>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <Lcd_create_custom_char>:

/****
** create a custom char to location
****/
void Lcd_create_custom_char(uint8_t location, uint8_t* data_bytes)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	// We only have 8 locations 0-7 for custom chars
	location &= 0x07; 
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 0307 	and.w	r3, r3, #7
 8000246:	71fb      	strb	r3, [r7, #7]
	// Set CGRAM address
	lcd_write_command(SET_CGRAM_ADDRESS | (location << 3));
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	b25b      	sxtb	r3, r3
 800024e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000252:	b25b      	sxtb	r3, r3
 8000254:	b2db      	uxtb	r3, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f90c 	bl	8000474 <lcd_write_command>
	
	// Write 8 bytes custom char pattern
	for (i = 0; i < 8; i++) 
 800025c:	2300      	movs	r3, #0
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e009      	b.n	8000276 <Lcd_create_custom_char+0x42>
	{
		lcd_write_data(data_bytes[i]);
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	4413      	add	r3, r2
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f922 	bl	80004b4 <lcd_write_data>
	for (i = 0; i < 8; i++) 
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	3301      	adds	r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	2b07      	cmp	r3, #7
 800027a:	d9f2      	bls.n	8000262 <Lcd_create_custom_char+0x2e>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	4603      	mov	r3, r0
 800028e:	460a      	mov	r2, r1
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	4613      	mov	r3, r2
 8000294:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8000296:	79bb      	ldrb	r3, [r7, #6]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d107      	bne.n	80002ac <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f8e5 	bl	8000474 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 80002aa:	e00a      	b.n	80002c2 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	3340      	adds	r3, #64	; 0x40
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	b25b      	sxtb	r3, r3
 80002b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f8d9 	bl	8000474 <lcd_write_command>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <Lcd_write_custom_char>:

/****
** write custom char to x,y on the LCD
*****/
void Lcd_write_custom_char( uint8_t x, uint8_t y, uint8_t location)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	460b      	mov	r3, r1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	4613      	mov	r3, r2
 80002da:	717b      	strb	r3, [r7, #5]
	Lcd_gotoxy( x,y);
 80002dc:	79ba      	ldrb	r2, [r7, #6]
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffcf 	bl	8000286 <Lcd_gotoxy>
	lcd_write_data(location);
 80002e8:	797b      	ldrb	r3, [r7, #5]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f8e2 	bl	80004b4 <lcd_write_data>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Lcd_clear_xy>:
/*****
** clear x,y on the LCD
******/

void Lcd_clear_xy(uint8_t x,uint8_t y)
{	
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	Lcd_gotoxy( x,y);
 8000308:	79ba      	ldrb	r2, [r7, #6]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffb9 	bl	8000286 <Lcd_gotoxy>
	lcd_write_data(' ');
 8000314:	2020      	movs	r0, #32
 8000316:	f000 f8cd 	bl	80004b4 <lcd_write_data>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b4b      	ldr	r3, [pc, #300]	; (8000468 <Lcd_configure+0x144>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a4a      	ldr	r2, [pc, #296]	; (8000468 <Lcd_configure+0x144>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b48      	ldr	r3, [pc, #288]	; (8000468 <Lcd_configure+0x144>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b45      	ldr	r3, [pc, #276]	; (8000468 <Lcd_configure+0x144>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a44      	ldr	r2, [pc, #272]	; (8000468 <Lcd_configure+0x144>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b42      	ldr	r3, [pc, #264]	; (8000468 <Lcd_configure+0x144>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b3f      	ldr	r3, [pc, #252]	; (8000468 <Lcd_configure+0x144>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a3e      	ldr	r2, [pc, #248]	; (8000468 <Lcd_configure+0x144>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b3c      	ldr	r3, [pc, #240]	; (8000468 <Lcd_configure+0x144>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8000380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000384:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4834      	ldr	r0, [pc, #208]	; (800046c <Lcd_configure+0x148>)
 800039a:	f002 f95f 	bl	800265c <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 800039e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ac:	2303      	movs	r3, #3
 80003ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	482d      	ldr	r0, [pc, #180]	; (800046c <Lcd_configure+0x148>)
 80003b8:	f002 f950 	bl	800265c <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ca:	2303      	movs	r3, #3
 80003cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4825      	ldr	r0, [pc, #148]	; (800046c <Lcd_configure+0x148>)
 80003d6:	f002 f941 	bl	800265c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e0:	4822      	ldr	r0, [pc, #136]	; (800046c <Lcd_configure+0x148>)
 80003e2:	f002 fad6 	bl	8002992 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f4:	2303      	movs	r3, #3
 80003f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <Lcd_configure+0x14c>)
 8000400:	f002 f92c 	bl	800265c <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4814      	ldr	r0, [pc, #80]	; (8000470 <Lcd_configure+0x14c>)
 800041e:	f002 f91d 	bl	800265c <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 8000422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000426:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000430:	2303      	movs	r3, #3
 8000432:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <Lcd_configure+0x14c>)
 800043c:	f002 f90e 	bl	800265c <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 8000440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000444:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <Lcd_configure+0x14c>)
 800045a:	f002 f8ff 	bl	800265c <HAL_GPIO_Init>
	
}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800
 8000470:	40010c00 	.word	0x40010c00

08000474 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000484:	480a      	ldr	r0, [pc, #40]	; (80004b0 <lcd_write_command+0x3c>)
 8000486:	f002 fa84 	bl	8002992 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2104      	movs	r1, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f82e 	bl	80004f4 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	f003 030f 	and.w	r3, r3, #15
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2104      	movs	r1, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f826 	bl	80004f4 <lcd_write>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010800 	.word	0x40010800

080004b4 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <lcd_write_data+0x3c>)
 80004c6:	f002 fa64 	bl	8002992 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2104      	movs	r1, #4
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f80e 	bl	80004f4 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2104      	movs	r1, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f806 	bl	80004f4 <lcd_write>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010800 	.word	0x40010800

080004f4 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e023      	b.n	8000552 <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	fa42 f303 	asr.w	r3, r2, r3
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10c      	bne.n	8000534 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	4a18      	ldr	r2, [pc, #96]	; (8000580 <lcd_write+0x8c>)
 800051e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <lcd_write+0x90>)
 8000526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052a:	2200      	movs	r2, #0
 800052c:	4619      	mov	r1, r3
 800052e:	f002 fa30 	bl	8002992 <HAL_GPIO_WritePin>
 8000532:	e00b      	b.n	800054c <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <lcd_write+0x8c>)
 8000538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <lcd_write+0x90>)
 8000540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 fa23 	bl	8002992 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	3301      	adds	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3d7      	bcc.n	800050a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <lcd_write+0x94>)
 8000562:	f002 fa16 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f001 f836 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <lcd_write+0x94>)
 8000574:	f002 fa0d 	bl	8002992 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000
 8000584:	20000010 	.word	0x20000010
 8000588:	40010800 	.word	0x40010800

0800058c <debounce>:


							/*HAM CHONG DOI NUT NHAN */

uint8_t debounce(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
	    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f002 f9e1 	bl	8002964 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10c      	bne.n	80005c2 <debounce+0x36>
	    {
	    	HAL_Delay(80);
 80005a8:	2050      	movs	r0, #80	; 0x50
 80005aa:	f001 f815 	bl	80015d8 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f002 f9d6 	bl	8002964 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <debounce+0x36>
	        {
	            return 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <debounce+0x38>
	        }
	    }
	    return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HienThiCacDonVi>:



                                  /* HAM DE HIEN THI LEN LCD */
void HienThiCacDonVi (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

	uint8_t degreeC[8] = { 0b00110, 0b00110 };    /*cai nay de tao ra dau do*/
 80005d2:	f240 6306 	movw	r3, #1542	; 0x606
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
	/*Nhan nut menu*/
	if (debounce(GPIOB, GPIO_PIN_0)==1)
 80005dc:	2101      	movs	r1, #1
 80005de:	48c3      	ldr	r0, [pc, #780]	; (80008ec <HienThiCacDonVi+0x320>)
 80005e0:	f7ff ffd4 	bl	800058c <debounce>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d108      	bne.n	80005fc <HienThiCacDonVi+0x30>
	{
		Lcd_clear_display();
 80005ea:	f7ff fe1c 	bl	8000226 <Lcd_clear_display>
		menu=menu+1;
 80005ee:	4bc0      	ldr	r3, [pc, #768]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4bbd      	ldr	r3, [pc, #756]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005fa:	701a      	strb	r2, [r3, #0]
	}


	if(menu==0)
 80005fc:	4bbc      	ldr	r3, [pc, #752]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d156      	bne.n	80006b4 <HienThiCacDonVi+0xe8>
	{
	Lcd_gotoxy(0, 0);
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fe3c 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", tempVariable);
 800060e:	4bb9      	ldr	r3, [pc, #740]	; (80008f4 <HienThiCacDonVi+0x328>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	49b8      	ldr	r1, [pc, #736]	; (80008f8 <HienThiCacDonVi+0x32c>)
 8000616:	48b9      	ldr	r0, [pc, #740]	; (80008fc <HienThiCacDonVi+0x330>)
 8000618:	f005 fb12 	bl	8005c40 <siprintf>
	Lcd_write_string(a);
 800061c:	48b7      	ldr	r0, [pc, #732]	; (80008fc <HienThiCacDonVi+0x330>)
 800061e:	f7ff fde5 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(11, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	200b      	movs	r0, #11
 8000626:	f7ff fe2e 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", gasVariable);
 800062a:	4bb5      	ldr	r3, [pc, #724]	; (8000900 <HienThiCacDonVi+0x334>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	49b1      	ldr	r1, [pc, #708]	; (80008f8 <HienThiCacDonVi+0x32c>)
 8000632:	48b2      	ldr	r0, [pc, #712]	; (80008fc <HienThiCacDonVi+0x330>)
 8000634:	f005 fb04 	bl	8005c40 <siprintf>
	Lcd_write_string(a);
 8000638:	48b0      	ldr	r0, [pc, #704]	; (80008fc <HienThiCacDonVi+0x330>)
 800063a:	f7ff fdd7 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(11, 1);
 800063e:	2101      	movs	r1, #1
 8000640:	200b      	movs	r0, #11
 8000642:	f7ff fe20 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", fireVariable);
 8000646:	4baf      	ldr	r3, [pc, #700]	; (8000904 <HienThiCacDonVi+0x338>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	49aa      	ldr	r1, [pc, #680]	; (80008f8 <HienThiCacDonVi+0x32c>)
 800064e:	48ab      	ldr	r0, [pc, #684]	; (80008fc <HienThiCacDonVi+0x330>)
 8000650:	f005 faf6 	bl	8005c40 <siprintf>
	Lcd_write_string(a);
 8000654:	48a9      	ldr	r0, [pc, #676]	; (80008fc <HienThiCacDonVi+0x330>)
 8000656:	f7ff fdc9 	bl	80001ec <Lcd_write_string>
	Lcd_create_custom_char(0, degreeC);
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff fde8 	bl	8000234 <Lcd_create_custom_char>
	Lcd_write_custom_char(3, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2003      	movs	r0, #3
 800066a:	f7ff fe2e 	bl	80002ca <Lcd_write_custom_char>
	Lcd_gotoxy(4, 0);
 800066e:	2100      	movs	r1, #0
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff fe08 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("C");
 8000676:	48a4      	ldr	r0, [pc, #656]	; (8000908 <HienThiCacDonVi+0x33c>)
 8000678:	f7ff fdb8 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(8, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff fe01 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("Ga:");
 8000684:	48a1      	ldr	r0, [pc, #644]	; (800090c <HienThiCacDonVi+0x340>)
 8000686:	f7ff fdb1 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(15, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	200f      	movs	r0, #15
 800068e:	f7ff fdfa 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("%");
 8000692:	489f      	ldr	r0, [pc, #636]	; (8000910 <HienThiCacDonVi+0x344>)
 8000694:	f7ff fdaa 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(8, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	2008      	movs	r0, #8
 800069c:	f7ff fdf3 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("Fi:");
 80006a0:	489c      	ldr	r0, [pc, #624]	; (8000914 <HienThiCacDonVi+0x348>)
 80006a2:	f7ff fda3 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(15, 1);
 80006a6:	2101      	movs	r1, #1
 80006a8:	200f      	movs	r0, #15
 80006aa:	f7ff fdec 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("%");
 80006ae:	4898      	ldr	r0, [pc, #608]	; (8000910 <HienThiCacDonVi+0x344>)
 80006b0:	f7ff fd9c 	bl	80001ec <Lcd_write_string>
	}


		if(menu==1)
 80006b4:	4b8e      	ldr	r3, [pc, #568]	; (80008f0 <HienThiCacDonVi+0x324>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d165      	bne.n	800078a <HienThiCacDonVi+0x1be>
		{
			Lcd_gotoxy(0, 0);
 80006be:	2100      	movs	r1, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fde0 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_string("Temp range:");
 80006c6:	4894      	ldr	r0, [pc, #592]	; (8000918 <HienThiCacDonVi+0x34c>)
 80006c8:	f7ff fd90 	bl	80001ec <Lcd_write_string>
			Lcd_create_custom_char(0, degreeC);
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fdaf 	bl	8000234 <Lcd_create_custom_char>
			Lcd_write_custom_char(3, 1, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff fdf5 	bl	80002ca <Lcd_write_custom_char>
			Lcd_gotoxy(4, 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff fdcf 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_string("C");
 80006e8:	4887      	ldr	r0, [pc, #540]	; (8000908 <HienThiCacDonVi+0x33c>)
 80006ea:	f7ff fd7f 	bl	80001ec <Lcd_write_string>
			Lcd_gotoxy(0, 1);
 80006ee:	2101      	movs	r1, #1
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fdc8 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_int(tempRange);
 80006f6:	4b89      	ldr	r3, [pc, #548]	; (800091c <HienThiCacDonVi+0x350>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd5f 	bl	80001c0 <Lcd_write_int>
			if (debounce(GPIOB, GPIO_PIN_1)==1)
 8000702:	2102      	movs	r1, #2
 8000704:	4879      	ldr	r0, [pc, #484]	; (80008ec <HienThiCacDonVi+0x320>)
 8000706:	f7ff ff41 	bl	800058c <debounce>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d11a      	bne.n	8000746 <HienThiCacDonVi+0x17a>
			{
				tempRange++;
 8000710:	4b82      	ldr	r3, [pc, #520]	; (800091c <HienThiCacDonVi+0x350>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b80      	ldr	r3, [pc, #512]	; (800091c <HienThiCacDonVi+0x350>)
 800071c:	701a      	strb	r2, [r3, #0]
				Lcd_clear_xy(0,1);
 800071e:	2101      	movs	r1, #1
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fde9 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(1,1);
 8000726:	2101      	movs	r1, #1
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff fde5 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(2,1);
 800072e:	2101      	movs	r1, #1
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff fde1 	bl	80002f8 <Lcd_clear_xy>
				if(tempRange >150)
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <HienThiCacDonVi+0x350>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b96      	cmp	r3, #150	; 0x96
 800073e:	d902      	bls.n	8000746 <HienThiCacDonVi+0x17a>
				{
					tempRange=20;
 8000740:	4b76      	ldr	r3, [pc, #472]	; (800091c <HienThiCacDonVi+0x350>)
 8000742:	2214      	movs	r2, #20
 8000744:	701a      	strb	r2, [r3, #0]
				}
			}
			if (debounce(GPIOB, GPIO_PIN_3)==1)
 8000746:	2108      	movs	r1, #8
 8000748:	4868      	ldr	r0, [pc, #416]	; (80008ec <HienThiCacDonVi+0x320>)
 800074a:	f7ff ff1f 	bl	800058c <debounce>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d11a      	bne.n	800078a <HienThiCacDonVi+0x1be>
			{
				tempRange--;
 8000754:	4b71      	ldr	r3, [pc, #452]	; (800091c <HienThiCacDonVi+0x350>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b01      	subs	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b6f      	ldr	r3, [pc, #444]	; (800091c <HienThiCacDonVi+0x350>)
 8000760:	701a      	strb	r2, [r3, #0]
				Lcd_clear_xy(0,1);
 8000762:	2101      	movs	r1, #1
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fdc7 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(1,1);
 800076a:	2101      	movs	r1, #1
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fdc3 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(2,1);
 8000772:	2101      	movs	r1, #1
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff fdbf 	bl	80002f8 <Lcd_clear_xy>
				if(tempRange<20)
 800077a:	4b68      	ldr	r3, [pc, #416]	; (800091c <HienThiCacDonVi+0x350>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b13      	cmp	r3, #19
 8000782:	d802      	bhi.n	800078a <HienThiCacDonVi+0x1be>
				{
					tempRange=150;
 8000784:	4b65      	ldr	r3, [pc, #404]	; (800091c <HienThiCacDonVi+0x350>)
 8000786:	2296      	movs	r2, #150	; 0x96
 8000788:	701a      	strb	r2, [r3, #0]
				}
			}
		}


		if(menu==2)
 800078a:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <HienThiCacDonVi+0x324>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b02      	cmp	r3, #2
 8000792:	d155      	bne.n	8000840 <HienThiCacDonVi+0x274>
			{
				Lcd_gotoxy(0, 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fd75 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("Gas range:");
 800079c:	4860      	ldr	r0, [pc, #384]	; (8000920 <HienThiCacDonVi+0x354>)
 800079e:	f7ff fd25 	bl	80001ec <Lcd_write_string>
				Lcd_gotoxy(0, 1);
 80007a2:	2101      	movs	r1, #1
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fd6e 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_int(gasRange);
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <HienThiCacDonVi+0x358>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd05 	bl	80001c0 <Lcd_write_int>
				Lcd_gotoxy(4, 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fd64 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("%");
 80007be:	4854      	ldr	r0, [pc, #336]	; (8000910 <HienThiCacDonVi+0x344>)
 80007c0:	f7ff fd14 	bl	80001ec <Lcd_write_string>
				if (debounce(GPIOB, GPIO_PIN_1)==1)
 80007c4:	2102      	movs	r1, #2
 80007c6:	4849      	ldr	r0, [pc, #292]	; (80008ec <HienThiCacDonVi+0x320>)
 80007c8:	f7ff fee0 	bl	800058c <debounce>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d11a      	bne.n	8000808 <HienThiCacDonVi+0x23c>
				{
					gasRange++;
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <HienThiCacDonVi+0x358>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b51      	ldr	r3, [pc, #324]	; (8000924 <HienThiCacDonVi+0x358>)
 80007de:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fd88 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fd84 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 80007f0:	2101      	movs	r1, #1
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fd80 	bl	80002f8 <Lcd_clear_xy>
					if(gasRange>100)
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <HienThiCacDonVi+0x358>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b64      	cmp	r3, #100	; 0x64
 8000800:	d902      	bls.n	8000808 <HienThiCacDonVi+0x23c>
					{
						gasRange=0;
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <HienThiCacDonVi+0x358>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
					}
				}
				if (debounce(GPIOB, GPIO_PIN_3)==1)
 8000808:	2108      	movs	r1, #8
 800080a:	4838      	ldr	r0, [pc, #224]	; (80008ec <HienThiCacDonVi+0x320>)
 800080c:	f7ff febe 	bl	800058c <debounce>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d114      	bne.n	8000840 <HienThiCacDonVi+0x274>
				{
					gasRange--;
 8000816:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HienThiCacDonVi+0x358>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	3b01      	subs	r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b40      	ldr	r3, [pc, #256]	; (8000924 <HienThiCacDonVi+0x358>)
 8000822:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 8000824:	2101      	movs	r1, #1
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fd66 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 800082c:	2101      	movs	r1, #1
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fd62 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 8000834:	2101      	movs	r1, #1
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff fd5e 	bl	80002f8 <Lcd_clear_xy>
					if(gasRange<0)
 800083c:	4b39      	ldr	r3, [pc, #228]	; (8000924 <HienThiCacDonVi+0x358>)
 800083e:	781b      	ldrb	r3, [r3, #0]
				}
			}



		if(menu==3)
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <HienThiCacDonVi+0x324>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b03      	cmp	r3, #3
 8000848:	d178      	bne.n	800093c <HienThiCacDonVi+0x370>
			{
				Lcd_gotoxy(0, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd1a 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("Fire range:");
 8000852:	4835      	ldr	r0, [pc, #212]	; (8000928 <HienThiCacDonVi+0x35c>)
 8000854:	f7ff fcca 	bl	80001ec <Lcd_write_string>
				Lcd_gotoxy(0, 1);
 8000858:	2101      	movs	r1, #1
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd13 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_int(fireRange);
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <HienThiCacDonVi+0x360>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcaa 	bl	80001c0 <Lcd_write_int>
				Lcd_gotoxy(4, 1);
 800086c:	2101      	movs	r1, #1
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fd09 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("%");
 8000874:	4826      	ldr	r0, [pc, #152]	; (8000910 <HienThiCacDonVi+0x344>)
 8000876:	f7ff fcb9 	bl	80001ec <Lcd_write_string>
				if (debounce(GPIOB, GPIO_PIN_1)==1)
 800087a:	2102      	movs	r1, #2
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <HienThiCacDonVi+0x320>)
 800087e:	f7ff fe85 	bl	800058c <debounce>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d11a      	bne.n	80008be <HienThiCacDonVi+0x2f2>
				{
					fireRange++;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <HienThiCacDonVi+0x360>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <HienThiCacDonVi+0x360>)
 8000894:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd2d 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 800089e:	2101      	movs	r1, #1
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fd29 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fd25 	bl	80002f8 <Lcd_clear_xy>
					if(fireRange>100)
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HienThiCacDonVi+0x360>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d902      	bls.n	80008be <HienThiCacDonVi+0x2f2>
					{
						fireRange=0;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HienThiCacDonVi+0x360>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
					}
				}
				if (debounce(GPIOB, GPIO_PIN_3)==1)
 80008be:	2108      	movs	r1, #8
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <HienThiCacDonVi+0x320>)
 80008c2:	f7ff fe63 	bl	800058c <debounce>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d137      	bne.n	800093c <HienThiCacDonVi+0x370>
				{
					fireRange--;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HienThiCacDonVi+0x360>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3b01      	subs	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HienThiCacDonVi+0x360>)
 80008d8:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 80008da:	2101      	movs	r1, #1
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fd0b 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fd07 	bl	80002f8 <Lcd_clear_xy>
 80008ea:	e021      	b.n	8000930 <HienThiCacDonVi+0x364>
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	20000483 	.word	0x20000483
 80008f4:	20000466 	.word	0x20000466
 80008f8:	0800666c 	.word	0x0800666c
 80008fc:	20000468 	.word	0x20000468
 8000900:	20000462 	.word	0x20000462
 8000904:	20000464 	.word	0x20000464
 8000908:	08006674 	.word	0x08006674
 800090c:	08006678 	.word	0x08006678
 8000910:	0800667c 	.word	0x0800667c
 8000914:	08006680 	.word	0x08006680
 8000918:	08006684 	.word	0x08006684
 800091c:	20000018 	.word	0x20000018
 8000920:	08006690 	.word	0x08006690
 8000924:	2000001a 	.word	0x2000001a
 8000928:	0800669c 	.word	0x0800669c
 800092c:	20000019 	.word	0x20000019
					Lcd_clear_xy(2,1);
 8000930:	2101      	movs	r1, #1
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fce0 	bl	80002f8 <Lcd_clear_xy>
					if(fireRange<0)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HienThiCacDonVi+0x388>)
 800093a:	781b      	ldrb	r3, [r3, #0]
			}




		if(menu>3)
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HienThiCacDonVi+0x38c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b03      	cmp	r3, #3
 8000944:	d902      	bls.n	800094c <HienThiCacDonVi+0x380>
		{
			menu=0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HienThiCacDonVi+0x38c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
		}
	}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000019 	.word	0x20000019
 8000958:	20000483 	.word	0x20000483

0800095c <SendWarning>:



										/*   HAM GUI TIN HIEU SMS    */
void SendWarning()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	const char* warningMsg1 = "AT+CMGS=\"0765214176\"\r\n";
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <SendWarning+0x54>)
 8000964:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)warningMsg1,strlen(warningMsg1),HAL_MAX_DELAY);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fbf2 	bl	8000150 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <SendWarning+0x58>)
 8000978:	f003 f8f8 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(500);
 800097c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000980:	f000 fe2a 	bl	80015d8 <HAL_Delay>
	const char* warningMsg2 = "WARNING DANGER PRESS '1' TO SHUT DOWN\x1A\r\n";
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <SendWarning+0x5c>)
 8000986:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)warningMsg2, strlen(warningMsg2),HAL_MAX_DELAY);
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff fbe1 	bl	8000150 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	6839      	ldr	r1, [r7, #0]
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <SendWarning+0x58>)
 800099a:	f003 f8e7 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 800099e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a2:	f000 fe19 	bl	80015d8 <HAL_Delay>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	080066a8 	.word	0x080066a8
 80009b4:	20000400 	.word	0x20000400
 80009b8:	080066c0 	.word	0x080066c0

080009bc <CanhBao>:


                                        /*    HAM CANH BAO MUC DO   */

int CanhBao (uint16_t a /*temp*/, uint16_t b /*gas*/, uint16_t c /*fire*/ )
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	460b      	mov	r3, r1
 80009c8:	80bb      	strh	r3, [r7, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	807b      	strh	r3, [r7, #2]

	if (/*a >= tempRange ||*/ b >= gasRange || c >= fireRange)
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <CanhBao+0x40>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	88ba      	ldrh	r2, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d206      	bcs.n	80009ea <CanhBao+0x2e>
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <CanhBao+0x44>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	887a      	ldrh	r2, [r7, #2]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d301      	bcc.n	80009ee <CanhBao+0x32>
	{
		return 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <CanhBao+0x34>
	}
	else
	{
		return 0;
 80009ee:	2300      	movs	r3, #0
	}
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000001a 	.word	0x2000001a
 8000a00:	20000019 	.word	0x20000019

08000a04 <BuzzerSound>:




void BuzzerSound()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4818      	ldr	r0, [pc, #96]	; (8000a70 <BuzzerSound+0x6c>)
 8000a0e:	f001 ffc0 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a16:	f000 fddf 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <BuzzerSound+0x6c>)
 8000a20:	f001 ffb7 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 fdd7 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <BuzzerSound+0x6c>)
 8000a30:	f001 ffaf 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fdcf 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <BuzzerSound+0x6c>)
 8000a40:	f001 ffa7 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 fdc7 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <BuzzerSound+0x6c>)
 8000a50:	f001 ff9f 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f000 fdbf 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <BuzzerSound+0x6c>)
 8000a60:	f001 ff97 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f000 fdb7 	bl	80015d8 <HAL_Delay>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010800 	.word	0x40010800

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b0a4      	sub	sp, #144	; 0x90
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fd7b 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f891 	bl	8000ba4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Lcd_Init();
 8000a82:	f7ff fb85 	bl	8000190 <Lcd_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f000 f9bb 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8a:	f000 f99b 	bl	8000dc4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a8e:	f000 f8e5 	bl	8000c5c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a92:	f000 f96d 	bl	8000d70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a96:	f000 f93d 	bl	8000d14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  buff[0] = '\0';
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <main+0xfc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) var, 3);
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4934      	ldr	r1, [pc, #208]	; (8000b74 <main+0x100>)
 8000aa4:	4834      	ldr	r0, [pc, #208]	; (8000b78 <main+0x104>)
 8000aa6:	f000 fe93 	bl	80017d0 <HAL_ADC_Start_DMA>
  Lcd_clear_display();
 8000aaa:	f7ff fbbc 	bl	8000226 <Lcd_clear_display>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Tast01 */
  osThreadDef(Tast01, DisplayLCD, osPriorityNormal, 0, 128);
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <main+0x108>)
 8000ab0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ab4:	461d      	mov	r5, r3
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tast01Handle = osThreadCreate(osThread(Tast01), NULL);
 8000ac2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fed3 	bl	8004874 <osThreadCreate>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <main+0x10c>)
 8000ad2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Warning, osPriorityNormal, 0, 128);
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <main+0x110>)
 8000ad6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ada:	461d      	mov	r5, r3
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fec0 	bl	8004874 <osThreadCreate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <main+0x114>)
 8000af8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, TogglePin, osPriorityNormal, 0, 128);
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <main+0x118>)
 8000afc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b00:	461d      	mov	r5, r3
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000b0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fead 	bl	8004874 <osThreadCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <main+0x11c>)
 8000b1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, ReadADC, osPriorityNormal, 0, 128);
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <main+0x120>)
 8000b22:	f107 0420 	add.w	r4, r7, #32
 8000b26:	461d      	mov	r5, r3
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fe9a 	bl	8004874 <osThreadCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <main+0x124>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task05 */
  osThreadDef(Task05, Receive, osPriorityNormal, 0, 128);
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <main+0x128>)
 8000b48:	1d3c      	adds	r4, r7, #4
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fe89 	bl	8004874 <osThreadCreate>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <main+0x12c>)
 8000b66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b68:	f003 fe7d 	bl	8004866 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0xf8>
 8000b6e:	bf00      	nop
 8000b70:	2000047c 	.word	0x2000047c
 8000b74:	2000045c 	.word	0x2000045c
 8000b78:	20000338 	.word	0x20000338
 8000b7c:	080066f4 	.word	0x080066f4
 8000b80:	20000448 	.word	0x20000448
 8000b84:	08006718 	.word	0x08006718
 8000b88:	2000044c 	.word	0x2000044c
 8000b8c:	0800673c 	.word	0x0800673c
 8000b90:	20000450 	.word	0x20000450
 8000b94:	08006760 	.word	0x08006760
 8000b98:	20000454 	.word	0x20000454
 8000b9c:	08006784 	.word	0x08006784
 8000ba0:	20000458 	.word	0x20000458

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 f864 	bl	8005c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 f826 	bl	8002c4c <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c06:	f000 fa63 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fa92 	bl	8003150 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c32:	f000 fa4d 	bl	80010d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c36:	2302      	movs	r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fc42 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4e:	f000 fa3f 	bl	80010d0 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	; 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <MX_ADC1_Init+0xb4>)
 8000c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c88:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c9a:	481c      	ldr	r0, [pc, #112]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000c9c:	f000 fcc0 	bl	8001620 <HAL_ADC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ca6:	f000 fa13 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000cbc:	f000 ff4a 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 fa03 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000cd8:	f000 ff3c 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000ce2:	f000 f9f5 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_ADC1_Init+0xb0>)
 8000cf4:	f000 ff2e 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cfe:	f000 f9e7 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000338 	.word	0x20000338
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C1_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d52:	f001 fe37 	bl	80029c4 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f9b8 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200003ac 	.word	0x200003ac
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART1_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da8:	f002 fe90 	bl	8003acc <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f98d 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000400 	.word	0x20000400
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_DMA_Init+0x38>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2105      	movs	r1, #5
 8000de6:	200b      	movs	r0, #11
 8000de8:	f001 f96b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dec:	200b      	movs	r0, #11
 8000dee:	f001 f984 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_GPIO_Init+0xac>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2120      	movs	r1, #32
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_GPIO_Init+0xb0>)
 8000e62:	f001 fd96 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0xb0>)
 8000e6c:	f001 fd91 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e70:	2360      	movs	r3, #96	; 0x60
 8000e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <MX_GPIO_Init+0xb0>)
 8000e88:	f001 fbe8 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_GPIO_Init+0xb4>)
 8000ea0:	f001 fbdc 	bl	800265c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <DisplayLCD>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DisplayLCD */
void DisplayLCD(void const * argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HienThiCacDonVi();
 8000ec0:	f7ff fb84 	bl	80005cc <HienThiCacDonVi>
    osDelay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f003 fd21 	bl	800490c <osDelay>
	HienThiCacDonVi();
 8000eca:	e7f9      	b.n	8000ec0 <DisplayLCD+0x8>

08000ecc <Warning>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Warning */
void Warning(void const * argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Warning */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive(&huart1, buff, 1,100);
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4917      	ldr	r1, [pc, #92]	; (8000f38 <Warning+0x6c>)
 8000eda:	4818      	ldr	r0, [pc, #96]	; (8000f3c <Warning+0x70>)
 8000edc:	f002 fec9 	bl	8003c72 <HAL_UART_Receive>
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1  && resend == 0)
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <Warning+0x74>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <Warning+0x78>)
 8000ee6:	8811      	ldrh	r1, [r2, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <Warning+0x7c>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fd65 	bl	80009bc <CanhBao>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d106      	bne.n	8000f06 <Warning+0x3a>
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <Warning+0x80>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <Warning+0x3a>
	{
			SendWarning();
 8000f02:	f7ff fd2b 	bl	800095c <SendWarning>
	}
	if (buff[0] == '1' && send == 1)
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <Warning+0x6c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b31      	cmp	r3, #49	; 0x31
 8000f0c:	d10f      	bne.n	8000f2e <Warning+0x62>
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <Warning+0x84>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10a      	bne.n	8000f2e <Warning+0x62>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <Warning+0x88>)
 8000f1e:	f001 fd38 	bl	8002992 <HAL_GPIO_WritePin>
		resend = 1;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <Warning+0x80>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
		buff[0]='\0';
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <Warning+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f003 fcec 	bl	800490c <osDelay>
	HAL_UART_Receive(&huart1, buff, 1,100);
 8000f34:	e7ce      	b.n	8000ed4 <Warning+0x8>
 8000f36:	bf00      	nop
 8000f38:	2000047c 	.word	0x2000047c
 8000f3c:	20000400 	.word	0x20000400
 8000f40:	20000466 	.word	0x20000466
 8000f44:	20000462 	.word	0x20000462
 8000f48:	20000464 	.word	0x20000464
 8000f4c:	20000482 	.word	0x20000482
 8000f50:	20000481 	.word	0x20000481
 8000f54:	40010800 	.word	0x40010800

08000f58 <TogglePin>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TogglePin */
void TogglePin(void const * argument)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TogglePin */
  /* Infinite loop */
  for(;;)
  {
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1)
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <TogglePin+0x9c>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <TogglePin+0xa0>)
 8000f66:	8811      	ldrh	r1, [r2, #0]
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <TogglePin+0xa4>)
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fd25 	bl	80009bc <CanhBao>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d125      	bne.n	8000fc4 <TogglePin+0x6c>
	{
		send=1;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <TogglePin+0xa8>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
		if(resend == 1)
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <TogglePin+0xac>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d103      	bne.n	8000f90 <TogglePin+0x38>
		{
			send=0;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <TogglePin+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e02d      	b.n	8000fec <TogglePin+0x94>
		}
		else
		{
			BuzzerSound();
 8000f90:	f7ff fd38 	bl	8000a04 <BuzzerSound>
			timecount=timecount+1;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <TogglePin+0xb0>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <TogglePin+0xb0>)
 8000fa0:	701a      	strb	r2, [r3, #0]
			if(timecount==7)
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <TogglePin+0xb0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d11f      	bne.n	8000fec <TogglePin+0x94>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <TogglePin+0xb4>)
 8000fb2:	f001 fcee 	bl	8002992 <HAL_GPIO_WritePin>
				timecount=0;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <TogglePin+0xb0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
				resend = 1;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <TogglePin+0xac>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e013      	b.n	8000fec <TogglePin+0x94>
			}
		}
	}
	else if(CanhBao(tempVariable,gasVariable,fireVariable) == 0)
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <TogglePin+0x9c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <TogglePin+0xa0>)
 8000fca:	8811      	ldrh	r1, [r2, #0]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <TogglePin+0xa4>)
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fcf3 	bl	80009bc <CanhBao>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <TogglePin+0x94>
	{
		timecount=0;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <TogglePin+0xb0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <TogglePin+0xb4>)
 8000fe8:	f001 fcd3 	bl	8002992 <HAL_GPIO_WritePin>
	}
    osDelay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f003 fc8d 	bl	800490c <osDelay>
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1)
 8000ff2:	e7b5      	b.n	8000f60 <TogglePin+0x8>
 8000ff4:	20000466 	.word	0x20000466
 8000ff8:	20000462 	.word	0x20000462
 8000ffc:	20000464 	.word	0x20000464
 8001000:	20000481 	.word	0x20000481
 8001004:	20000482 	.word	0x20000482
 8001008:	20000484 	.word	0x20000484
 800100c:	40010800 	.word	0x40010800

08001010 <ReadADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadADC */
void ReadADC(void const * argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadADC */
  /* Infinite loop */
  for(;;)
  {
	tempVariable=((var[0]*500)/4095);
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <ReadADC+0x78>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <ReadADC+0x7c>)
 8001028:	fb82 1203 	smull	r1, r2, r2, r3
 800102c:	441a      	add	r2, r3
 800102e:	12d2      	asrs	r2, r2, #11
 8001030:	17db      	asrs	r3, r3, #31
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <ReadADC+0x80>)
 8001038:	801a      	strh	r2, [r3, #0]
	gasVariable=((var[1] * 100) / 4095);
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <ReadADC+0x78>)
 800103c:	885b      	ldrh	r3, [r3, #2]
 800103e:	461a      	mov	r2, r3
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <ReadADC+0x7c>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	441a      	add	r2, r3
 800104e:	12d2      	asrs	r2, r2, #11
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ReadADC+0x84>)
 8001058:	801a      	strh	r2, [r3, #0]
	fireVariable=(((4095 - var[2]) * 100) / 4095);
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <ReadADC+0x78>)
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001062:	330f      	adds	r3, #15
 8001064:	2264      	movs	r2, #100	; 0x64
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <ReadADC+0x7c>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	441a      	add	r2, r3
 8001072:	12d2      	asrs	r2, r2, #11
 8001074:	17db      	asrs	r3, r3, #31
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <ReadADC+0x88>)
 800107c:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f003 fc44 	bl	800490c <osDelay>
	tempVariable=((var[0]*500)/4095);
 8001084:	e7c8      	b.n	8001018 <ReadADC+0x8>
 8001086:	bf00      	nop
 8001088:	2000045c 	.word	0x2000045c
 800108c:	80080081 	.word	0x80080081
 8001090:	20000466 	.word	0x20000466
 8001094:	20000462 	.word	0x20000462
 8001098:	20000464 	.word	0x20000464

0800109c <Receive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive */
void Receive(void const * argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f003 fc31 	bl	800490c <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <Receive+0x8>

080010ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010be:	f000 fa6f 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_MspInit+0x68>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_MspInit+0x68>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_MspInit+0x68>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x68>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_MspInit+0x68>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x68>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	210f      	movs	r1, #15
 8001116:	f06f 0001 	mvn.w	r0, #1
 800111a:	f000 ffd2 	bl	80020c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x6c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_MspInit+0x6c>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0xcc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d151      	bne.n	8001210 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_ADC_MspInit+0xd0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <HAL_ADC_MspInit+0xd0>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_ADC_MspInit+0xd0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_ADC_MspInit+0xd0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_ADC_MspInit+0xd0>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_ADC_MspInit+0xd0>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800119c:	2307      	movs	r3, #7
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	481d      	ldr	r0, [pc, #116]	; (8001220 <HAL_ADC_MspInit+0xd4>)
 80011ac:	f001 fa56 	bl	800265c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_ADC_MspInit+0xdc>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011da:	2220      	movs	r2, #32
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011e6:	f000 ff97 	bl	8002118 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80011f0:	f7ff ff6e 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011f8:	621a      	str	r2, [r3, #32]
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_ADC_MspInit+0xd8>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2105      	movs	r1, #5
 8001204:	2012      	movs	r0, #18
 8001206:	f000 ff5c 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800120a:	2012      	movs	r0, #18
 800120c:	f000 ff75 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012400 	.word	0x40012400
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800
 8001224:	20000368 	.word	0x20000368
 8001228:	40020008 	.word	0x40020008

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_I2C_MspInit+0x70>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d123      	bne.n	8001294 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001264:	23c0      	movs	r3, #192	; 0xc0
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001268:	2312      	movs	r3, #18
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_I2C_MspInit+0x78>)
 8001278:	f001 f9f0 	bl	800265c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_I2C_MspInit+0x74>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005400 	.word	0x40005400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010c00 	.word	0x40010c00

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <HAL_UART_MspInit+0x9c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d139      	bne.n	800133c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_UART_MspInit+0xa4>)
 800130e:	f001 f9a5 	bl	800265c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <HAL_UART_MspInit+0xa4>)
 8001328:	f001 f998 	bl	800265c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2025      	movs	r0, #37	; 0x25
 8001332:	f000 fec6 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001336:	2025      	movs	r0, #37	; 0x25
 8001338:	f000 fedf 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40013800 	.word	0x40013800
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800

08001350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_InitTick+0xd0>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_InitTick+0xd0>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_InitTick+0xd0>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137e:	f107 020c 	add.w	r2, r7, #12
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 f851 	bl	8003430 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800138e:	f002 f83b 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8001392:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_InitTick+0xd4>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9b      	lsrs	r3, r3, #18
 800139e:	3b01      	subs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_InitTick+0xd8>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <HAL_InitTick+0xdc>)
 80013a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_InitTick+0xd8>)
 80013aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_InitTick+0xd8>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_InitTick+0xd8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_InitTick+0xd8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_InitTick+0xd8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <HAL_InitTick+0xd8>)
 80013ca:	f002 f935 	bl	8003638 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11b      	bne.n	8001414 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013dc:	4812      	ldr	r0, [pc, #72]	; (8001428 <HAL_InitTick+0xd8>)
 80013de:	f002 f983 	bl	80036e8 <HAL_TIM_Base_Start_IT>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013f0:	2019      	movs	r0, #25
 80013f2:	f000 fe82 	bl	80020fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d808      	bhi.n	800140e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	2019      	movs	r0, #25
 8001402:	f000 fe5e 	bl	80020c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_InitTick+0xe0>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e002      	b.n	8001414 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001418:	4618      	mov	r0, r3
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20000488 	.word	0x20000488
 800142c:	40012c00 	.word	0x40012c00
 8001430:	20000020 	.word	0x20000020

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel1_IRQHandler+0x10>)
 8001466:	f000 ffc5 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000368 	.word	0x20000368

08001474 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <ADC1_2_IRQHandler+0x10>)
 800147a:	f000 fa87 	bl	800198c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000338 	.word	0x20000338

08001488 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM1_UP_IRQHandler+0x10>)
 800148e:	f002 f97d 	bl	800378c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000488 	.word	0x20000488

0800149c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <USART1_IRQHandler+0x10>)
 80014a2:	f002 fc79 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000400 	.word	0x20000400

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f004 fc2c 	bl	8005d3c <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20005000 	.word	0x20005000
 8001510:	00000400 	.word	0x00000400
 8001514:	200004d0 	.word	0x200004d0
 8001518:	20001370 	.word	0x20001370

0800151c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff fff8 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800152e:	490c      	ldr	r1, [pc, #48]	; (8001560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001544:	4c09      	ldr	r4, [pc, #36]	; (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f004 fbf9 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff fa8d 	bl	8000a74 <main>
  bx lr
 800155a:	4770      	bx	lr
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001564:	08006810 	.word	0x08006810
  ldr r2, =_sbss
 8001568:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800156c:	2000136c 	.word	0x2000136c

08001570 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <CAN1_RX1_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x28>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x28>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fd91 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff fee0 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fda4 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x1c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x20>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_IncTick+0x20>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000024 	.word	0x20000024
 80015c0:	200004d4 	.word	0x200004d4

080015c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_GetTick+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	200004d4 	.word	0x200004d4

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff fff0 	bl	80015c4 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffe0 	bl	80015c4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000024 	.word	0x20000024

08001620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0be      	b.n	80017c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fd74 	bl	800114c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fbc7 	bl	8001df8 <ADC_ConversionStop_Disable>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 8099 	bne.w	80017ae <HAL_ADC_Init+0x18e>
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 8095 	bne.w	80017ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800168c:	f023 0302 	bic.w	r3, r3, #2
 8001690:	f043 0202 	orr.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7b1b      	ldrb	r3, [r3, #12]
 80016a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b8:	d003      	beq.n	80016c2 <HAL_ADC_Init+0xa2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_ADC_Init+0xa8>
 80016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c6:	e000      	b.n	80016ca <HAL_ADC_Init+0xaa>
 80016c8:	2300      	movs	r3, #0
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7d1b      	ldrb	r3, [r3, #20]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d119      	bne.n	800170c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7b1b      	ldrb	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	035a      	lsls	r2, r3, #13
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e00b      	b.n	800170c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f043 0220 	orr.w	r2, r3, #32
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_ADC_Init+0x1a8>)
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	430b      	orrs	r3, r1
 8001732:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800173c:	d003      	beq.n	8001746 <HAL_ADC_Init+0x126>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d104      	bne.n	8001750 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	3b01      	subs	r3, #1
 800174c:	051b      	lsls	r3, r3, #20
 800174e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	430a      	orrs	r2, r1
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_ADC_Init+0x1ac>)
 800176c:	4013      	ands	r3, r2
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	d10b      	bne.n	800178c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800178a:	e018      	b.n	80017be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f023 0312 	bic.w	r3, r3, #18
 8001794:	f043 0210 	orr.w	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ac:	e007      	b.n	80017be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	f043 0210 	orr.w	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	ffe1f7fd 	.word	0xffe1f7fd
 80017cc:	ff1f0efe 	.word	0xff1f0efe

080017d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a64      	ldr	r2, [pc, #400]	; (8001978 <HAL_ADC_Start_DMA+0x1a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_ADC_Start_DMA+0x24>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a63      	ldr	r2, [pc, #396]	; (800197c <HAL_ADC_Start_DMA+0x1ac>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d106      	bne.n	8001802 <HAL_ADC_Start_DMA+0x32>
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_ADC_Start_DMA+0x1a8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 80b3 	bne.w	8001968 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_Start_DMA+0x40>
 800180c:	2302      	movs	r3, #2
 800180e:	e0ae      	b.n	800196e <HAL_ADC_Start_DMA+0x19e>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fa93 	bl	8001d44 <ADC_Enable>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 809a 	bne.w	800195e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_ADC_Start_DMA+0x1ac>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d105      	bne.n	8001854 <HAL_ADC_Start_DMA+0x84>
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_ADC_Start_DMA+0x1a8>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d115      	bne.n	8001880 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186a:	2b00      	cmp	r3, #0
 800186c:	d026      	beq.n	80018bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001876:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187e:	e01d      	b.n	80018bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_ADC_Start_DMA+0x1a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d004      	beq.n	80018a0 <HAL_ADC_Start_DMA+0xd0>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a38      	ldr	r2, [pc, #224]	; (800197c <HAL_ADC_Start_DMA+0x1ac>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d10d      	bne.n	80018bc <HAL_ADC_Start_DMA+0xec>
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_ADC_Start_DMA+0x1a8>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f023 0206 	bic.w	r2, r3, #6
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a25      	ldr	r2, [pc, #148]	; (8001980 <HAL_ADC_Start_DMA+0x1b0>)
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_ADC_Start_DMA+0x1b4>)
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_ADC_Start_DMA+0x1b8>)
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0202 	mvn.w	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001914:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a18      	ldr	r0, [r3, #32]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	334c      	adds	r3, #76	; 0x4c
 8001920:	4619      	mov	r1, r3
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f000 fc51 	bl	80021cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001934:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001938:	d108      	bne.n	800194c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001948:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800194a:	e00f      	b.n	800196c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800195a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800195c:	e006      	b.n	800196c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001966:	e001      	b.n	800196c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012400 	.word	0x40012400
 800197c:	40012800 	.word	0x40012800
 8001980:	08001e7b 	.word	0x08001e7b
 8001984:	08001ef7 	.word	0x08001ef7
 8001988:	08001f13 	.word	0x08001f13

0800198c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03e      	beq.n	8001a2c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d039      	beq.n	8001a2c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019de:	d11d      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d119      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0220 	bic.w	r2, r2, #32
 80019f6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f874 	bl	8001b0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0212 	mvn.w	r2, #18
 8001a2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d04d      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d048      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001a62:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001a66:	d012      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d125      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a84:	d11d      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d119      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa3f 	bl	8001f46 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 020c 	mvn.w	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f81b 	bl	8001b2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0201 	mvn.w	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x20>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0dc      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1da>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d81c      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b05      	subs	r3, #5
 8001b96:	221f      	movs	r2, #31
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4019      	ands	r1, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b05      	subs	r3, #5
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbc:	e03c      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d81c      	bhi.n	8001c00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b23      	subs	r3, #35	; 0x23
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4019      	ands	r1, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b23      	subs	r3, #35	; 0x23
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfe:	e01b      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b41      	subs	r3, #65	; 0x41
 8001c12:	221f      	movs	r2, #31
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4019      	ands	r1, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b41      	subs	r3, #65	; 0x41
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d91c      	bls.n	8001c7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b1e      	subs	r3, #30
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b1e      	subs	r3, #30
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	e019      	b.n	8001cae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6919      	ldr	r1, [r3, #16]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6898      	ldr	r0, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d003      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d132      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d125      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d126      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ce4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d11a      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	0c9a      	lsrs	r2, r3, #18
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x1b2>
 8001d12:	e007      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40012400 	.word	0x40012400
 8001d3c:	2000001c 	.word	0x2000001c
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d040      	beq.n	8001de4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <ADC_Enable+0xac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <ADC_Enable+0xb0>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d80:	e002      	b.n	8001d88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d8e:	f7ff fc19 	bl	80015c4 <HAL_GetTick>
 8001d92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	e01f      	b.n	8001dd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d96:	f7ff fc15 	bl	80015c4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d918      	bls.n	8001dd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d011      	beq.n	8001dd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d1d8      	bne.n	8001d96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000001c 	.word	0x2000001c
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d12e      	bne.n	8001e70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e22:	f7ff fbcf 	bl	80015c4 <HAL_GetTick>
 8001e26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	e01b      	b.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e2a:	f7ff fbcb 	bl	80015c4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d914      	bls.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10d      	bne.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e007      	b.n	8001e72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d0dc      	beq.n	8001e2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d127      	bne.n	8001ee4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eaa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eae:	d115      	bne.n	8001edc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fe14 	bl	8001b0a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ee2:	e004      	b.n	8001eee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fe09 	bl	8001b1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff fe01 	bl	8001b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <__NVIC_EnableIRQ+0x34>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff4f 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff64 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ffb2 	bl	8002048 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff81 	bl	8001ff4 <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff57 	bl	8001fbc <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e043      	b.n	80021b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_DMA_Init+0xa8>)
 8002136:	4413      	add	r3, r2
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_DMA_Init+0xac>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	009a      	lsls	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_DMA_Init+0xb0>)
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002162:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	bffdfff8 	.word	0xbffdfff8
 80021c4:	cccccccd 	.word	0xcccccccd
 80021c8:	40020000 	.word	0x40020000

080021cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Start_IT+0x20>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e04b      	b.n	8002284 <HAL_DMA_Start_IT+0xb8>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d13a      	bne.n	8002276 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f9eb 	bl	8002600 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 020e 	orr.w	r2, r2, #14
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00f      	b.n	8002264 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 020a 	orr.w	r2, r2, #10
 8002262:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e005      	b.n	8002282 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e020      	b.n	80022f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020e 	bic.w	r2, r2, #14
 80022c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d005      	beq.n	8002328 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e051      	b.n	80023cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020e 	bic.w	r2, r2, #14
 8002336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_DMA_Abort_IT+0xd4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d029      	beq.n	80023a6 <HAL_DMA_Abort_IT+0xa2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	; (80023dc <HAL_DMA_Abort_IT+0xd8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_DMA_Abort_IT+0x9e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_DMA_Abort_IT+0xdc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01a      	beq.n	800239c <HAL_DMA_Abort_IT+0x98>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_DMA_Abort_IT+0xe0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d012      	beq.n	8002396 <HAL_DMA_Abort_IT+0x92>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_DMA_Abort_IT+0xe4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00a      	beq.n	8002390 <HAL_DMA_Abort_IT+0x8c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_DMA_Abort_IT+0xe8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_DMA_Abort_IT+0x86>
 8002384:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002388:	e00e      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 800238a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238e:	e00b      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	e008      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 8002396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239a:	e005      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 800239c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a0:	e002      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 80023a2:	2310      	movs	r3, #16
 80023a4:	e000      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 80023a6:	2301      	movs	r3, #1
 80023a8:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_DMA_Abort_IT+0xec>)
 80023aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
    } 
  }
  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40020008 	.word	0x40020008
 80023dc:	4002001c 	.word	0x4002001c
 80023e0:	40020030 	.word	0x40020030
 80023e4:	40020044 	.word	0x40020044
 80023e8:	40020058 	.word	0x40020058
 80023ec:	4002006c 	.word	0x4002006c
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d04f      	beq.n	80024bc <HAL_DMA_IRQHandler+0xc8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d04a      	beq.n	80024bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a66      	ldr	r2, [pc, #408]	; (80025e4 <HAL_DMA_IRQHandler+0x1f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d029      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xae>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a65      	ldr	r2, [pc, #404]	; (80025e8 <HAL_DMA_IRQHandler+0x1f4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d022      	beq.n	800249e <HAL_DMA_IRQHandler+0xaa>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a63      	ldr	r2, [pc, #396]	; (80025ec <HAL_DMA_IRQHandler+0x1f8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01a      	beq.n	8002498 <HAL_DMA_IRQHandler+0xa4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a62      	ldr	r2, [pc, #392]	; (80025f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d012      	beq.n	8002492 <HAL_DMA_IRQHandler+0x9e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <HAL_DMA_IRQHandler+0x200>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00a      	beq.n	800248c <HAL_DMA_IRQHandler+0x98>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5f      	ldr	r2, [pc, #380]	; (80025f8 <HAL_DMA_IRQHandler+0x204>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d102      	bne.n	8002486 <HAL_DMA_IRQHandler+0x92>
 8002480:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002484:	e00e      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 8002486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800248a:	e00b      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 800248c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002490:	e008      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 8002492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002496:	e005      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 8002498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249c:	e002      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	e000      	b.n	80024a4 <HAL_DMA_IRQHandler+0xb0>
 80024a2:	2304      	movs	r3, #4
 80024a4:	4a55      	ldr	r2, [pc, #340]	; (80025fc <HAL_DMA_IRQHandler+0x208>)
 80024a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8094 	beq.w	80025da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024ba:	e08e      	b.n	80025da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2202      	movs	r2, #2
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d056      	beq.n	800257a <HAL_DMA_IRQHandler+0x186>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d051      	beq.n	800257a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 020a 	bic.w	r2, r2, #10
 80024f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d029      	beq.n	800255a <HAL_DMA_IRQHandler+0x166>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <HAL_DMA_IRQHandler+0x1f4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d022      	beq.n	8002556 <HAL_DMA_IRQHandler+0x162>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a35      	ldr	r2, [pc, #212]	; (80025ec <HAL_DMA_IRQHandler+0x1f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01a      	beq.n	8002550 <HAL_DMA_IRQHandler+0x15c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d012      	beq.n	800254a <HAL_DMA_IRQHandler+0x156>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_DMA_IRQHandler+0x200>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x150>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_DMA_IRQHandler+0x204>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d102      	bne.n	800253e <HAL_DMA_IRQHandler+0x14a>
 8002538:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800253c:	e00e      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	e00b      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	e008      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 800254a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254e:	e005      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	e002      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 8002556:	2320      	movs	r3, #32
 8002558:	e000      	b.n	800255c <HAL_DMA_IRQHandler+0x168>
 800255a:	2302      	movs	r3, #2
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_DMA_IRQHandler+0x208>)
 800255e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d034      	beq.n	80025da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002578:	e02f      	b.n	80025da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2208      	movs	r2, #8
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_DMA_IRQHandler+0x1e8>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 020e 	bic.w	r2, r2, #14
 80025a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
    }
  }
  return;
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
}
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40020008 	.word	0x40020008
 80025e8:	4002001c 	.word	0x4002001c
 80025ec:	40020030 	.word	0x40020030
 80025f0:	40020044 	.word	0x40020044
 80025f4:	40020058 	.word	0x40020058
 80025f8:	4002006c 	.word	0x4002006c
 80025fc:	40020000 	.word	0x40020000

08002600 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d108      	bne.n	8002640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800263e:	e007      	b.n	8002650 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	; 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e169      	b.n	8002944 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002670:	2201      	movs	r2, #1
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8158 	bne.w	800293e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d05e      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 8002698:	4a98      	ldr	r2, [pc, #608]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d875      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 800269e:	4a98      	ldr	r2, [pc, #608]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d058      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026a4:	4a96      	ldr	r2, [pc, #600]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d86f      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026aa:	4a96      	ldr	r2, [pc, #600]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d052      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026b0:	4a94      	ldr	r2, [pc, #592]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d869      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026b6:	4a94      	ldr	r2, [pc, #592]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04c      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026bc:	4a92      	ldr	r2, [pc, #584]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d863      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026c2:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d046      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026c8:	4a90      	ldr	r2, [pc, #576]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d85d      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d82a      	bhi.n	8002728 <HAL_GPIO_Init+0xcc>
 80026d2:	2b12      	cmp	r3, #18
 80026d4:	d859      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_GPIO_Init+0x80>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002757 	.word	0x08002757
 80026e0:	08002731 	.word	0x08002731
 80026e4:	08002743 	.word	0x08002743
 80026e8:	08002785 	.word	0x08002785
 80026ec:	0800278b 	.word	0x0800278b
 80026f0:	0800278b 	.word	0x0800278b
 80026f4:	0800278b 	.word	0x0800278b
 80026f8:	0800278b 	.word	0x0800278b
 80026fc:	0800278b 	.word	0x0800278b
 8002700:	0800278b 	.word	0x0800278b
 8002704:	0800278b 	.word	0x0800278b
 8002708:	0800278b 	.word	0x0800278b
 800270c:	0800278b 	.word	0x0800278b
 8002710:	0800278b 	.word	0x0800278b
 8002714:	0800278b 	.word	0x0800278b
 8002718:	0800278b 	.word	0x0800278b
 800271c:	0800278b 	.word	0x0800278b
 8002720:	08002739 	.word	0x08002739
 8002724:	0800274d 	.word	0x0800274d
 8002728:	4a79      	ldr	r2, [pc, #484]	; (8002910 <HAL_GPIO_Init+0x2b4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800272e:	e02c      	b.n	800278a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	623b      	str	r3, [r7, #32]
          break;
 8002736:	e029      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	3304      	adds	r3, #4
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e024      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	3308      	adds	r3, #8
 8002748:	623b      	str	r3, [r7, #32]
          break;
 800274a:	e01f      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	330c      	adds	r3, #12
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e01a      	b.n	800278c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800275e:	2304      	movs	r3, #4
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e013      	b.n	800278c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800276c:	2308      	movs	r3, #8
 800276e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	611a      	str	r2, [r3, #16]
          break;
 8002776:	e009      	b.n	800278c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002778:	2308      	movs	r3, #8
 800277a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	615a      	str	r2, [r3, #20]
          break;
 8002782:	e003      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x130>
          break;
 800278a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d801      	bhi.n	8002796 <HAL_GPIO_Init+0x13a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	e001      	b.n	800279a <HAL_GPIO_Init+0x13e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	d802      	bhi.n	80027a8 <HAL_GPIO_Init+0x14c>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x152>
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3b08      	subs	r3, #8
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	210f      	movs	r1, #15
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80b1 	beq.w	800293e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_GPIO_Init+0x2c0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_GPIO_Init+0x1ec>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HAL_GPIO_Init+0x2c4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00d      	beq.n	8002844 <HAL_GPIO_Init+0x1e8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3e      	ldr	r2, [pc, #248]	; (8002924 <HAL_GPIO_Init+0x2c8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <HAL_GPIO_Init+0x1e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3d      	ldr	r2, [pc, #244]	; (8002928 <HAL_GPIO_Init+0x2cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_GPIO_Init+0x1e0>
 8002838:	2303      	movs	r3, #3
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 800283c:	2304      	movs	r3, #4
 800283e:	e004      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002840:	2302      	movs	r3, #2
 8002842:	e002      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002848:	2300      	movs	r3, #0
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	f002 0203 	and.w	r2, r2, #3
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	4093      	lsls	r3, r2
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800285a:	492f      	ldr	r1, [pc, #188]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	492c      	ldr	r1, [pc, #176]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	4928      	ldr	r1, [pc, #160]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	491e      	ldr	r1, [pc, #120]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4918      	ldr	r1, [pc, #96]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4914      	ldr	r1, [pc, #80]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d021      	beq.n	8002930 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e021      	b.n	800293e <HAL_GPIO_Init+0x2e2>
 80028fa:	bf00      	nop
 80028fc:	10320000 	.word	0x10320000
 8002900:	10310000 	.word	0x10310000
 8002904:	10220000 	.word	0x10220000
 8002908:	10210000 	.word	0x10210000
 800290c:	10120000 	.word	0x10120000
 8002910:	10110000 	.word	0x10110000
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000
 800291c:	40010800 	.word	0x40010800
 8002920:	40010c00 	.word	0x40010c00
 8002924:	40011000 	.word	0x40011000
 8002928:	40011400 	.word	0x40011400
 800292c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_GPIO_Init+0x304>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	43db      	mvns	r3, r3
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <HAL_GPIO_Init+0x304>)
 800293a:	4013      	ands	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	f47f ae8e 	bne.w	8002670 <HAL_GPIO_Init+0x14>
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	372c      	adds	r7, #44	; 0x2c
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e001      	b.n	8002986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	807b      	strh	r3, [r7, #2]
 800299e:	4613      	mov	r3, r2
 80029a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a2:	787b      	ldrb	r3, [r7, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ae:	e003      	b.n	80029b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12b      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fc1e 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a28:	f000 fcda 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a81      	ldr	r2, [pc, #516]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d807      	bhi.n	8002a48 <HAL_I2C_Init+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a80      	ldr	r2, [pc, #512]	; (8002c3c <HAL_I2C_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e006      	b.n	8002a56 <HAL_I2C_Init+0x92>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	; (8002c40 <HAL_I2C_Init+0x27c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0e7      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a78      	ldr	r2, [pc, #480]	; (8002c44 <HAL_I2C_Init+0x280>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <HAL_I2C_Init+0xd4>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e009      	b.n	8002aac <HAL_I2C_Init+0xe8>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_I2C_Init+0x284>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	495c      	ldr	r1, [pc, #368]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d819      	bhi.n	8002b00 <HAL_I2C_Init+0x13c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e59      	subs	r1, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_I2C_Init+0x138>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e59      	subs	r1, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	e051      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x168>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x18e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x196>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e272      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8087 	beq.w	8002d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d00c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d112      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d10b      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c92:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x12c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d168      	bne.n	8002d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e24c      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x76>
 8002cb4:	4b80      	ldr	r3, [pc, #512]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7f      	ldr	r2, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7a      	ldr	r2, [pc, #488]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a77      	ldr	r2, [pc, #476]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0xbc>
 8002cee:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a71      	ldr	r2, [pc, #452]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6e      	ldr	r2, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fc4c 	bl	80015c4 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe fc48 	bl	80015c4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e200      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe4>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fc38 	bl	80015c4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe fc34 	bl	80015c4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1ec      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x10c>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c0      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4939      	ldr	r1, [pc, #228]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fbed 	bl	80015c4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe fbe9 	bl	80015c4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1a1      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4927      	ldr	r1, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fbcc 	bl	80015c4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fbc8 	bl	80015c4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e180      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03a      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d019      	beq.n	8002e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fbac 	bl	80015c4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fba8 	bl	80015c4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e160      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 fafe 	bl	8003490 <RCC_Delay>
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fb92 	bl	80015c4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea2:	e00f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fb8e 	bl	80015c4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e146      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	42420000 	.word	0x42420000
 8002ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b92      	ldr	r3, [pc, #584]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e9      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a6 	beq.w	800302a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b8b      	ldr	r3, [pc, #556]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a87      	ldr	r2, [pc, #540]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b82      	ldr	r3, [pc, #520]	; (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b7f      	ldr	r3, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	; (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fb4f 	bl	80015c4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fe fb4b 	bl	80015c4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	; 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e103      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b75      	ldr	r3, [pc, #468]	; (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x312>
 8002f50:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e02d      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x334>
 8002f66:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a69      	ldr	r2, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a66      	ldr	r2, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	e01c      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x356>
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a5a      	ldr	r2, [pc, #360]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe faff 	bl	80015c4 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fafb 	bl	80015c4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0b1      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCC_OscConfig+0x37e>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fae9 	bl	80015c4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fae5 	bl	80015c4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e09b      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	4b40      	ldr	r3, [pc, #256]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ee      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	4b36      	ldr	r3, [pc, #216]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d061      	beq.n	8003104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d146      	bne.n	80030d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fab9 	bl	80015c4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe fab5 	bl	80015c4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e06d      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d108      	bne.n	8003090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4921      	ldr	r1, [pc, #132]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a19      	ldr	r1, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	430b      	orrs	r3, r1
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fa89 	bl	80015c4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fa85 	bl	80015c4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e03d      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46a>
 80030d4:	e035      	b.n	8003142 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fa72 	bl	80015c4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fa6e 	bl	80015c4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e026      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x498>
 8003102:	e01e      	b.n	8003142 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e019      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
 8003118:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_OscConfig+0x500>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	429a      	cmp	r2, r3
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d0      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4965      	ldr	r1, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d040      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e073      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4936      	ldr	r1, [pc, #216]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe f9c0 	bl	80015c4 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe f9bc 	bl	80015c4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e053      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d210      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1cc>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f826 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	080067a8 	.word	0x080067a8
 800331c:	2000001c 	.word	0x2000001c
 8003320:	20000020 	.word	0x20000020

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x30>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x36>
 8003352:	e027      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	613b      	str	r3, [r7, #16]
      break;
 8003358:	e027      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0c5b      	lsrs	r3, r3, #17
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003386:	fb03 f202 	mul.w	r2, r3, r2
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e004      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	613b      	str	r3, [r7, #16]
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 80033a6:	613b      	str	r3, [r7, #16]
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	693b      	ldr	r3, [r7, #16]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	080067c0 	.word	0x080067c0
 80033c4:	080067d0 	.word	0x080067d0
 80033c8:	003d0900 	.word	0x003d0900

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <HAL_RCC_GetHCLKFreq+0x10>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	2000001c 	.word	0x2000001c

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff2 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	080067b8 	.word	0x080067b8

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffde 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	080067b8 	.word	0x080067b8

08003430 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40021000 	.word	0x40021000
 800348c:	40022000 	.word	0x40022000

08003490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <RCC_Delay+0x34>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <RCC_Delay+0x38>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0a5b      	lsrs	r3, r3, #9
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034ac:	bf00      	nop
  }
  while (Delay --);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	60fa      	str	r2, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <RCC_Delay+0x1c>
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	2000001c 	.word	0x2000001c
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d07d      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b4c      	ldr	r3, [pc, #304]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	61d3      	str	r3, [r2, #28]
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d118      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003520:	4b43      	ldr	r3, [pc, #268]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a42      	ldr	r2, [pc, #264]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352c:	f7fe f84a 	bl	80015c4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	e008      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fe f846 	bl	80015c4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e06d      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02e      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d027      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003570:	4b2e      	ldr	r3, [pc, #184]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe f815 	bl	80015c4 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe f811 	bl	80015c4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e036      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4917      	ldr	r1, [pc, #92]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	490b      	ldr	r1, [pc, #44]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4904      	ldr	r1, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	42420440 	.word	0x42420440

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f839 	bl	80036d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 f9b4 	bl	80039e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e03a      	b.n	8003776 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_TIM_Base_Start_IT+0x98>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_TIM_Base_Start_IT+0x9c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a13      	ldr	r2, [pc, #76]	; (8003788 <HAL_TIM_Base_Start_IT+0xa0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0202 	mvn.w	r2, #2
 80037b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8ed 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8e0 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8ef 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0204 	mvn.w	r2, #4
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8c3 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8b6 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8c5 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b08      	cmp	r3, #8
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0208 	mvn.w	r2, #8
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f899 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f88c 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f89b 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2208      	movs	r2, #8
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f86f 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f862 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f871 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0201 	mvn.w	r2, #1
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fbce 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8bf 	bl	8003aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f835 	bl	80039d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0220 	mvn.w	r2, #32
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f88a 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d007      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <TIM_Base_SetConfig+0xbc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <TIM_Base_SetConfig+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d108      	bne.n	8003a26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <TIM_Base_SetConfig+0xbc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <TIM_Base_SetConfig+0xc0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e042      	b.n	8003b64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fbd8 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fe03 	bl	800471c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d16d      	bne.n	8003c68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Transmit+0x2c>
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e066      	b.n	8003c6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003baa:	f7fd fd0b 	bl	80015c4 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc4:	d108      	bne.n	8003bd8 <HAL_UART_Transmit+0x6c>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e003      	b.n	8003be0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003be0:	e02a      	b.n	8003c38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2180      	movs	r1, #128	; 0x80
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fb8b 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e036      	b.n	8003c6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3302      	adds	r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	e007      	b.n	8003c2a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	781a      	ldrb	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3301      	adds	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1cf      	bne.n	8003be2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2140      	movs	r1, #64	; 0x40
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fb5b 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e006      	b.n	8003c6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Receive+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2222      	movs	r2, #34	; 0x22
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb6:	f7fd fc85 	bl	80015c4 <HAL_GetTick>
 8003cba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_UART_Receive+0x72>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cec:	e043      	b.n	8003d76 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb05 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e042      	b.n	8003d8e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3302      	adds	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e01f      	b.n	8003d68 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d30:	d007      	beq.n	8003d42 <HAL_UART_Receive+0xd0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_UART_Receive+0xde>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e008      	b.n	8003d62 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3301      	adds	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1b6      	bne.n	8003cee <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	; 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fbd1 	bl	800459e <UART_Receive_IT>
      return;
 8003dfc:	e25b      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81f2 	beq.w	80042ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb5c 	bl	800459e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa66 	bl	80043e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d041      	beq.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	; (8004178 <HAL_UART_IRQHandler+0x3e0>)
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f9bc 	bl	8002304 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f99c 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f998 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f994 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003fbe:	e175      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e173      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814f 	bne.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8148 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8141 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80b6 	beq.w	800417c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8145 	beq.w	80042b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 813e 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b20      	cmp	r3, #32
 8004044:	f000 8088 	beq.w	8004158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800405e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004074:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004080:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1d9      	bne.n	8004048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e1      	bne.n	8004094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800413a:	65ba      	str	r2, [r7, #88]	; 0x58
 800413c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f89a 	bl	800228c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004166:	b29b      	uxth	r3, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8bf 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004174:	e09c      	b.n	80042b0 <HAL_UART_IRQHandler+0x518>
 8004176:	bf00      	nop
 8004178:	080044a9 	.word	0x080044a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 808e 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8089 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041c6:	647a      	str	r2, [r7, #68]	; 0x44
 80041c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0310 	bic.w	r3, r3, #16
 8004236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	617b      	str	r3, [r7, #20]
   return(result);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e3      	bne.n	8004220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800425e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f844 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800426a:	e023      	b.n	80042b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f923 	bl	80044d0 <UART_Transmit_IT>
    return;
 800428a:	e014      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f962 	bl	800456e <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	37e8      	adds	r7, #232	; 0xe8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	; 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e050      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d04c      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fd f94c 	bl	80015c4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	d241      	bcs.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	623a      	str	r2, [r7, #32]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e00f      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d09f      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3740      	adds	r7, #64	; 0x40
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b095      	sub	sp, #84	; 0x54
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440c:	643a      	str	r2, [r7, #64]	; 0x40
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d119      	bne.n	8004490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60bb      	str	r3, [r7, #8]
   return(result);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447c:	61ba      	str	r2, [r7, #24]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800449e:	bf00      	nop
 80044a0:	3754      	adds	r7, #84	; 0x54
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff0c 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b21      	cmp	r3, #33	; 0x21
 80044e2:	d13e      	bne.n	8004562 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d114      	bne.n	8004518 <UART_Transmit_IT+0x48>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d110      	bne.n	8004518 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800450a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	1c9a      	adds	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]
 8004516:	e008      	b.n	800452a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6211      	str	r1, [r2, #32]
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29b      	uxth	r3, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4619      	mov	r1, r3
 8004538:	84d1      	strh	r1, [r2, #38]	; 0x26
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004584:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fe94 	bl	80042bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08c      	sub	sp, #48	; 0x30
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b22      	cmp	r3, #34	; 0x22
 80045b0:	f040 80ae 	bne.w	8004710 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d117      	bne.n	80045ee <UART_Receive_IT+0x50>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d113      	bne.n	80045ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	b29a      	uxth	r2, r3
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
 80045ec:	e026      	b.n	800463c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004600:	d007      	beq.n	8004612 <UART_Receive_IT+0x74>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <UART_Receive_IT+0x82>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e008      	b.n	8004632 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462c:	b2da      	uxtb	r2, r3
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29b      	uxth	r3, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4619      	mov	r1, r3
 800464a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800464c:	2b00      	cmp	r3, #0
 800464e:	d15d      	bne.n	800470c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0220 	bic.w	r2, r2, #32
 800465e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800466e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	2b01      	cmp	r3, #1
 8004694:	d135      	bne.n	8004702 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	623a      	str	r2, [r7, #32]
 80046be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d10a      	bne.n	80046f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fdf9 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
 8004700:	e002      	b.n	8004708 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fde3 	bl	80042ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e002      	b.n	8004712 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3730      	adds	r7, #48	; 0x30
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004756:	f023 030c 	bic.w	r3, r3, #12
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	430b      	orrs	r3, r1
 8004762:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <UART_SetConfig+0x114>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004784:	f7fe fe40 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	e002      	b.n	8004792 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800478c:	f7fe fe28 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004790:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	4a22      	ldr	r2, [pc, #136]	; (8004834 <UART_SetConfig+0x118>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	0119      	lsls	r1, r3, #4
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <UART_SetConfig+0x118>)
 80047ca:	fba3 0302 	umull	r0, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2064      	movs	r0, #100	; 0x64
 80047d2:	fb00 f303 	mul.w	r3, r0, r3
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	3332      	adds	r3, #50	; 0x32
 80047dc:	4a15      	ldr	r2, [pc, #84]	; (8004834 <UART_SetConfig+0x118>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e8:	4419      	add	r1, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009a      	lsls	r2, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <UART_SetConfig+0x118>)
 8004802:	fba3 0302 	umull	r0, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2064      	movs	r0, #100	; 0x64
 800480a:	fb00 f303 	mul.w	r3, r0, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a07      	ldr	r2, [pc, #28]	; (8004834 <UART_SetConfig+0x118>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	440a      	add	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40013800 	.word	0x40013800
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800484a:	2b84      	cmp	r3, #132	; 0x84
 800484c:	d005      	beq.n	800485a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800484e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	3303      	adds	r3, #3
 8004858:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800486a:	f000 fae7 	bl	8004e3c <vTaskStartScheduler>
  
  return osOK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}

08004874 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af04      	add	r7, sp, #16
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <osThreadCreate+0x54>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01c      	beq.n	80048c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685c      	ldr	r4, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691e      	ldr	r6, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ffc9 	bl	8004838 <makeFreeRtosPriority>
 80048a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048b0:	9202      	str	r2, [sp, #8]
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	9100      	str	r1, [sp, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4632      	mov	r2, r6
 80048ba:	4629      	mov	r1, r5
 80048bc:	4620      	mov	r0, r4
 80048be:	f000 f8e8 	bl	8004a92 <xTaskCreateStatic>
 80048c2:	4603      	mov	r3, r0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e01c      	b.n	8004902 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685c      	ldr	r4, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ffab 	bl	8004838 <makeFreeRtosPriority>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	9200      	str	r2, [sp, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4632      	mov	r2, r6
 80048f0:	4629      	mov	r1, r5
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 f929 	bl	8004b4a <xTaskCreate>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800490c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <osDelay+0x16>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e000      	b.n	8004924 <osDelay+0x18>
 8004922:	2301      	movs	r3, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fa55 	bl	8004dd4 <vTaskDelay>
  
  return osOK;
 800492a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0208 	add.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0208 	add.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f103 0208 	add.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d103      	bne.n	80049f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e00c      	b.n	8004a0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3308      	adds	r3, #8
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e002      	b.n	80049fe <vListInsert+0x2e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d2f6      	bcs.n	80049f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6852      	ldr	r2, [r2, #4]
 8004a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d103      	bne.n	8004a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	1e5a      	subs	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08e      	sub	sp, #56	; 0x38
 8004a96:	af04      	add	r7, sp, #16
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	61fb      	str	r3, [r7, #28]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ad8:	23a0      	movs	r3, #160	; 0xa0
 8004ada:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2ba0      	cmp	r3, #160	; 0xa0
 8004ae0:	d00a      	beq.n	8004af8 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61bb      	str	r3, [r7, #24]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01e      	beq.n	8004b3c <xTaskCreateStatic+0xaa>
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b16:	2300      	movs	r3, #0
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f850 	bl	8004bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b36:	f000 f8e3 	bl	8004d00 <prvAddNewTaskToReadyList>
 8004b3a:	e001      	b.n	8004b40 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b40:	697b      	ldr	r3, [r7, #20]
	}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b08c      	sub	sp, #48	; 0x30
 8004b4e:	af04      	add	r7, sp, #16
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fe96 	bl	8005890 <pvPortMalloc>
 8004b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b6c:	20a0      	movs	r0, #160	; 0xa0
 8004b6e:	f000 fe8f 	bl	8005890 <pvPortMalloc>
 8004b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b80:	e005      	b.n	8004b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f000 ff48 	bl	8005a18 <vPortFree>
 8004b88:	e001      	b.n	8004b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9303      	str	r3, [sp, #12]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	9302      	str	r3, [sp, #8]
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f80e 	bl	8004bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bb8:	69f8      	ldr	r0, [r7, #28]
 8004bba:	f000 f8a1 	bl	8004d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e002      	b.n	8004bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bca:	69bb      	ldr	r3, [r7, #24]
	}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bec:	3b01      	subs	r3, #1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	617b      	str	r3, [r7, #20]
}
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	e012      	b.n	8004c48 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	7819      	ldrb	r1, [r3, #0]
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3334      	adds	r3, #52	; 0x34
 8004c32:	460a      	mov	r2, r1
 8004c34:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d9e9      	bls.n	8004c22 <prvInitialiseNewTask+0x4e>
 8004c4e:	e000      	b.n	8004c52 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004c50:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b06      	cmp	r3, #6
 8004c5e:	d901      	bls.n	8004c64 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c60:	2306      	movs	r3, #6
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fe79 	bl	8004972 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	3318      	adds	r3, #24
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fe74 	bl	8004972 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f1c3 0207 	rsb	r2, r3, #7
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	334c      	adds	r3, #76	; 0x4c
 8004cb4:	224c      	movs	r2, #76	; 0x4c
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ffe1 	bl	8005c80 <memset>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <prvInitialiseNewTask+0x120>)
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <prvInitialiseNewTask+0x124>)
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <prvInitialiseNewTask+0x128>)
 8004cce:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	69b8      	ldr	r0, [r7, #24]
 8004cd6:	f000 fc29 	bl	800552c <pxPortInitialiseStack>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20001224 	.word	0x20001224
 8004cf8:	2000128c 	.word	0x2000128c
 8004cfc:	200012f4 	.word	0x200012f4

08004d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d08:	f000 fd00 	bl	800570c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <prvAddNewTaskToReadyList+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <prvAddNewTaskToReadyList+0xb8>)
 8004d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <prvAddNewTaskToReadyList+0xbc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d1e:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <prvAddNewTaskToReadyList+0xbc>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <prvAddNewTaskToReadyList+0xb8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d110      	bne.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d2c:	f000 fad2 	bl	80052d4 <prvInitialiseTaskLists>
 8004d30:	e00d      	b.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <prvAddNewTaskToReadyList+0xc0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <prvAddNewTaskToReadyList+0xbc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d802      	bhi.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <prvAddNewTaskToReadyList+0xbc>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <prvAddNewTaskToReadyList+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <prvAddNewTaskToReadyList+0xc4>)
 8004d56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <prvAddNewTaskToReadyList+0xcc>)
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff fe02 	bl	800498a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d86:	f000 fcf1 	bl	800576c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <prvAddNewTaskToReadyList+0xc0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00e      	beq.n	8004db0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <prvAddNewTaskToReadyList+0xbc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d207      	bcs.n	8004db0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <prvAddNewTaskToReadyList+0xd0>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	200005d8 	.word	0x200005d8
 8004dbc:	200004d8 	.word	0x200004d8
 8004dc0:	200005e4 	.word	0x200005e4
 8004dc4:	200005f4 	.word	0x200005f4
 8004dc8:	200005e0 	.word	0x200005e0
 8004dcc:	200004dc 	.word	0x200004dc
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d017      	beq.n	8004e16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <vTaskDelay+0x60>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <vTaskDelay+0x30>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60bb      	str	r3, [r7, #8]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e04:	f000 f884 	bl	8004f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fb28 	bl	8005460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e10:	f000 f88c 	bl	8004f2c <xTaskResumeAll>
 8004e14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <vTaskDelay+0x64>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20000600 	.word	0x20000600
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	1d39      	adds	r1, r7, #4
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb f984 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	9202      	str	r2, [sp, #8]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	460a      	mov	r2, r1
 8004e6a:	4921      	ldr	r1, [pc, #132]	; (8004ef0 <vTaskStartScheduler+0xb4>)
 8004e6c:	4821      	ldr	r0, [pc, #132]	; (8004ef4 <vTaskStartScheduler+0xb8>)
 8004e6e:	f7ff fe10 	bl	8004a92 <xTaskCreateStatic>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <vTaskStartScheduler+0xbc>)
 8004e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e78:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <vTaskStartScheduler+0xbc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e001      	b.n	8004e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11b      	bne.n	8004ec8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
}
 8004ea2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <vTaskStartScheduler+0xc0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	334c      	adds	r3, #76	; 0x4c
 8004eaa:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <vTaskStartScheduler+0xc4>)
 8004eac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <vTaskStartScheduler+0xc8>)
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <vTaskStartScheduler+0xcc>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <vTaskStartScheduler+0xd0>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ec2:	f000 fbb1 	bl	8005628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ec6:	e00e      	b.n	8004ee6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d10a      	bne.n	8004ee6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <vTaskStartScheduler+0xa8>
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	080067a0 	.word	0x080067a0
 8004ef4:	080052a5 	.word	0x080052a5
 8004ef8:	200005fc 	.word	0x200005fc
 8004efc:	200004d8 	.word	0x200004d8
 8004f00:	20000078 	.word	0x20000078
 8004f04:	200005f8 	.word	0x200005f8
 8004f08:	200005e4 	.word	0x200005e4
 8004f0c:	200005dc 	.word	0x200005dc

08004f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <vTaskSuspendAll+0x18>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4a03      	ldr	r2, [pc, #12]	; (8004f28 <vTaskSuspendAll+0x18>)
 8004f1c:	6013      	str	r3, [r2, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000600 	.word	0x20000600

08004f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <xTaskResumeAll+0x114>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	603b      	str	r3, [r7, #0]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f58:	f000 fbd8 	bl	800570c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f5c:	4b38      	ldr	r3, [pc, #224]	; (8005040 <xTaskResumeAll+0x114>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4a37      	ldr	r2, [pc, #220]	; (8005040 <xTaskResumeAll+0x114>)
 8004f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f66:	4b36      	ldr	r3, [pc, #216]	; (8005040 <xTaskResumeAll+0x114>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d161      	bne.n	8005032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f6e:	4b35      	ldr	r3, [pc, #212]	; (8005044 <xTaskResumeAll+0x118>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d05d      	beq.n	8005032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f76:	e02e      	b.n	8004fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f78:	4b33      	ldr	r3, [pc, #204]	; (8005048 <xTaskResumeAll+0x11c>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3318      	adds	r3, #24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fd5b 	bl	8004a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fd56 	bl	8004a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	; (800504c <xTaskResumeAll+0x120>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	; (800504c <xTaskResumeAll+0x120>)
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a27      	ldr	r2, [pc, #156]	; (8005050 <xTaskResumeAll+0x124>)
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7ff fce4 	bl	800498a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	4b23      	ldr	r3, [pc, #140]	; (8005054 <xTaskResumeAll+0x128>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004fd0:	4b21      	ldr	r3, [pc, #132]	; (8005058 <xTaskResumeAll+0x12c>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <xTaskResumeAll+0x11c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1cc      	bne.n	8004f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fe4:	f000 fa18 	bl	8005418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <xTaskResumeAll+0x130>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ff4:	f000 f836 	bl	8005064 <xTaskIncrementTick>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <xTaskResumeAll+0x12c>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3b01      	subs	r3, #1
 8005008:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f1      	bne.n	8004ff4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005010:	4b12      	ldr	r3, [pc, #72]	; (800505c <xTaskResumeAll+0x130>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <xTaskResumeAll+0x12c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <xTaskResumeAll+0x134>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005032:	f000 fb9b 	bl	800576c <vPortExitCritical>

	return xAlreadyYielded;
 8005036:	68bb      	ldr	r3, [r7, #8]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000600 	.word	0x20000600
 8005044:	200005d8 	.word	0x200005d8
 8005048:	20000598 	.word	0x20000598
 800504c:	200005e0 	.word	0x200005e0
 8005050:	200004dc 	.word	0x200004dc
 8005054:	200004d8 	.word	0x200004d8
 8005058:	200005ec 	.word	0x200005ec
 800505c:	200005e8 	.word	0x200005e8
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <xTaskIncrementTick+0x150>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 808d 	bne.w	8005192 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005078:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <xTaskIncrementTick+0x154>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005080:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <xTaskIncrementTick+0x154>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d120      	bne.n	80050ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <xTaskIncrementTick+0x158>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <xTaskIncrementTick+0x46>
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <xTaskIncrementTick+0x158>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <xTaskIncrementTick+0x15c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a41      	ldr	r2, [pc, #260]	; (80051bc <xTaskIncrementTick+0x158>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4a41      	ldr	r2, [pc, #260]	; (80051c0 <xTaskIncrementTick+0x15c>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <xTaskIncrementTick+0x160>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a3f      	ldr	r2, [pc, #252]	; (80051c4 <xTaskIncrementTick+0x160>)
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	f000 f9a5 	bl	8005418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <xTaskIncrementTick+0x164>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d34d      	bcc.n	8005174 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <xTaskIncrementTick+0x158>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <xTaskIncrementTick+0x82>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xTaskIncrementTick+0x84>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ec:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <xTaskIncrementTick+0x164>)
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	601a      	str	r2, [r3, #0]
					break;
 80050f4:	e03e      	b.n	8005174 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <xTaskIncrementTick+0x158>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d203      	bcs.n	8005116 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800510e:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <xTaskIncrementTick+0x164>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6013      	str	r3, [r2, #0]
						break;
 8005114:	e02e      	b.n	8005174 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fc90 	bl	8004a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3318      	adds	r3, #24
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fc87 	bl	8004a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	2201      	movs	r2, #1
 8005138:	409a      	lsls	r2, r3
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <xTaskIncrementTick+0x168>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <xTaskIncrementTick+0x168>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <xTaskIncrementTick+0x16c>)
 8005152:	441a      	add	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7ff fc15 	bl	800498a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <xTaskIncrementTick+0x170>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	429a      	cmp	r2, r3
 800516c:	d3b4      	bcc.n	80050d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800516e:	2301      	movs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005172:	e7b1      	b.n	80050d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <xTaskIncrementTick+0x170>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4915      	ldr	r1, [pc, #84]	; (80051d0 <xTaskIncrementTick+0x16c>)
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d907      	bls.n	800519c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e004      	b.n	800519c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <xTaskIncrementTick+0x174>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a0f      	ldr	r2, [pc, #60]	; (80051d8 <xTaskIncrementTick+0x174>)
 800519a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <xTaskIncrementTick+0x178>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000600 	.word	0x20000600
 80051b8:	200005dc 	.word	0x200005dc
 80051bc:	20000590 	.word	0x20000590
 80051c0:	20000594 	.word	0x20000594
 80051c4:	200005f0 	.word	0x200005f0
 80051c8:	200005f8 	.word	0x200005f8
 80051cc:	200005e0 	.word	0x200005e0
 80051d0:	200004dc 	.word	0x200004dc
 80051d4:	200004d8 	.word	0x200004d8
 80051d8:	200005e8 	.word	0x200005e8
 80051dc:	200005ec 	.word	0x200005ec

080051e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <vTaskSwitchContext+0xac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <vTaskSwitchContext+0xb0>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051f4:	e044      	b.n	8005280 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <vTaskSwitchContext+0xb0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <vTaskSwitchContext+0xb4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800520a:	7afb      	ldrb	r3, [r7, #11]
 800520c:	f1c3 031f 	rsb	r3, r3, #31
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	4921      	ldr	r1, [pc, #132]	; (8005298 <vTaskSwitchContext+0xb8>)
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	607b      	str	r3, [r7, #4]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <vTaskSwitchContext+0x5a>
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <vTaskSwitchContext+0xb8>)
 8005248:	4413      	add	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3308      	adds	r3, #8
 800525e:	429a      	cmp	r2, r3
 8005260:	d104      	bne.n	800526c <vTaskSwitchContext+0x8c>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <vTaskSwitchContext+0xbc>)
 8005274:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <vTaskSwitchContext+0xbc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	334c      	adds	r3, #76	; 0x4c
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <vTaskSwitchContext+0xc0>)
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000600 	.word	0x20000600
 8005290:	200005ec 	.word	0x200005ec
 8005294:	200005e0 	.word	0x200005e0
 8005298:	200004dc 	.word	0x200004dc
 800529c:	200004d8 	.word	0x200004d8
 80052a0:	20000078 	.word	0x20000078

080052a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052ac:	f000 f852 	bl	8005354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <prvIdleTask+0x28>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d9f9      	bls.n	80052ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <prvIdleTask+0x2c>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c8:	e7f0      	b.n	80052ac <prvIdleTask+0x8>
 80052ca:	bf00      	nop
 80052cc:	200004dc 	.word	0x200004dc
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e00c      	b.n	80052fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <prvInitialiseTaskLists+0x60>)
 80052ec:	4413      	add	r3, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fb20 	bl	8004934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3301      	adds	r3, #1
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d9ef      	bls.n	80052e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005300:	480d      	ldr	r0, [pc, #52]	; (8005338 <prvInitialiseTaskLists+0x64>)
 8005302:	f7ff fb17 	bl	8004934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005306:	480d      	ldr	r0, [pc, #52]	; (800533c <prvInitialiseTaskLists+0x68>)
 8005308:	f7ff fb14 	bl	8004934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800530c:	480c      	ldr	r0, [pc, #48]	; (8005340 <prvInitialiseTaskLists+0x6c>)
 800530e:	f7ff fb11 	bl	8004934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005312:	480c      	ldr	r0, [pc, #48]	; (8005344 <prvInitialiseTaskLists+0x70>)
 8005314:	f7ff fb0e 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005318:	480b      	ldr	r0, [pc, #44]	; (8005348 <prvInitialiseTaskLists+0x74>)
 800531a:	f7ff fb0b 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <prvInitialiseTaskLists+0x78>)
 8005320:	4a05      	ldr	r2, [pc, #20]	; (8005338 <prvInitialiseTaskLists+0x64>)
 8005322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <prvInitialiseTaskLists+0x7c>)
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <prvInitialiseTaskLists+0x68>)
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200004dc 	.word	0x200004dc
 8005338:	20000568 	.word	0x20000568
 800533c:	2000057c 	.word	0x2000057c
 8005340:	20000598 	.word	0x20000598
 8005344:	200005ac 	.word	0x200005ac
 8005348:	200005c4 	.word	0x200005c4
 800534c:	20000590 	.word	0x20000590
 8005350:	20000594 	.word	0x20000594

08005354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800535a:	e019      	b.n	8005390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800535c:	f000 f9d6 	bl	800570c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <prvCheckTasksWaitingTermination+0x50>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fb67 	bl	8004a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <prvCheckTasksWaitingTermination+0x54>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3b01      	subs	r3, #1
 8005378:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <prvCheckTasksWaitingTermination+0x54>)
 800537a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3b01      	subs	r3, #1
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 8005384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005386:	f000 f9f1 	bl	800576c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f810 	bl	80053b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e1      	bne.n	800535c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200005ac 	.word	0x200005ac
 80053a8:	200005d8 	.word	0x200005d8
 80053ac:	200005c0 	.word	0x200005c0

080053b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	334c      	adds	r3, #76	; 0x4c
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fc67 	bl	8005c90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fb21 	bl	8005a18 <vPortFree>
				vPortFree( pxTCB );
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb1e 	bl	8005a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053dc:	e018      	b.n	8005410 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d103      	bne.n	80053f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fb15 	bl	8005a18 <vPortFree>
	}
 80053ee:	e00f      	b.n	8005410 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d00a      	beq.n	8005410 <prvDeleteTCB+0x60>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60fb      	str	r3, [r7, #12]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <prvDeleteTCB+0x5e>
	}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <prvResetNextTaskUnblockTime+0x40>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <prvResetNextTaskUnblockTime+0x14>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <prvResetNextTaskUnblockTime+0x16>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <prvResetNextTaskUnblockTime+0x44>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800543a:	e008      	b.n	800544e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <prvResetNextTaskUnblockTime+0x40>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4a04      	ldr	r2, [pc, #16]	; (800545c <prvResetNextTaskUnblockTime+0x44>)
 800544c:	6013      	str	r3, [r2, #0]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	20000590 	.word	0x20000590
 800545c:	200005f8 	.word	0x200005f8

08005460 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800546a:	4b29      	ldr	r3, [pc, #164]	; (8005510 <prvAddCurrentTaskToDelayedList+0xb0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005470:	4b28      	ldr	r3, [pc, #160]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fae2 	bl	8004a40 <uxListRemove>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	2201      	movs	r2, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43da      	mvns	r2, r3
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4013      	ands	r3, r2
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005498:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d10a      	bne.n	80054b8 <prvAddCurrentTaskToDelayedList+0x58>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	481a      	ldr	r0, [pc, #104]	; (800551c <prvAddCurrentTaskToDelayedList+0xbc>)
 80054b2:	f7ff fa6a 	bl	800498a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054b6:	e026      	b.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d209      	bcs.n	80054e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7ff fa77 	bl	80049d0 <vListInsert>
}
 80054e2:	e010      	b.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff fa6d 	bl	80049d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <prvAddCurrentTaskToDelayedList+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d202      	bcs.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200005dc 	.word	0x200005dc
 8005514:	200004d8 	.word	0x200004d8
 8005518:	200005e0 	.word	0x200005e0
 800551c:	200005c4 	.word	0x200005c4
 8005520:	20000594 	.word	0x20000594
 8005524:	20000590 	.word	0x20000590
 8005528:	200005f8 	.word	0x200005f8

0800552c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b04      	subs	r3, #4
 800553c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b04      	subs	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b04      	subs	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <pxPortInitialiseStack+0x54>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b14      	subs	r3, #20
 8005566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b20      	subs	r3, #32
 8005572:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	08005585 	.word	0x08005585

08005584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <prvTaskExitError+0x54>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d00a      	beq.n	80055ae <prvTaskExitError+0x2a>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60fb      	str	r3, [r7, #12]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <prvTaskExitError+0x28>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60bb      	str	r3, [r7, #8]
}
 80055c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055c2:	bf00      	nop
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0fc      	beq.n	80055c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000028 	.word	0x20000028
 80055dc:	00000000 	.word	0x00000000

080055e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <pxCurrentTCBConst2>)
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	6808      	ldr	r0, [r1, #0]
 80055e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055ea:	f380 8809 	msr	PSP, r0
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8811 	msr	BASEPRI, r0
 80055fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80055fe:	4770      	bx	lr

08005600 <pxCurrentTCBConst2>:
 8005600:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005608:	4806      	ldr	r0, [pc, #24]	; (8005624 <prvPortStartFirstTask+0x1c>)
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	6800      	ldr	r0, [r0, #0]
 800560e:	f380 8808 	msr	MSP, r0
 8005612:	b662      	cpsie	i
 8005614:	b661      	cpsie	f
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	df00      	svc	0
 8005620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005622:	bf00      	nop
 8005624:	e000ed08 	.word	0xe000ed08

08005628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800562e:	4b32      	ldr	r3, [pc, #200]	; (80056f8 <xPortStartScheduler+0xd0>)
 8005630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <xPortStartScheduler+0xd4>)
 8005654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <xPortStartScheduler+0xd8>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800565c:	e009      	b.n	8005672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <xPortStartScheduler+0xd8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3b01      	subs	r3, #1
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <xPortStartScheduler+0xd8>)
 8005666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b80      	cmp	r3, #128	; 0x80
 800567c:	d0ef      	beq.n	800565e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800567e:	4b20      	ldr	r3, [pc, #128]	; (8005700 <xPortStartScheduler+0xd8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1c3 0307 	rsb	r3, r3, #7
 8005686:	2b04      	cmp	r3, #4
 8005688:	d00a      	beq.n	80056a0 <xPortStartScheduler+0x78>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056a0:	4b17      	ldr	r3, [pc, #92]	; (8005700 <xPortStartScheduler+0xd8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <xPortStartScheduler+0xd8>)
 80056a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <xPortStartScheduler+0xd8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <xPortStartScheduler+0xd8>)
 80056b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <xPortStartScheduler+0xdc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a10      	ldr	r2, [pc, #64]	; (8005704 <xPortStartScheduler+0xdc>)
 80056c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <xPortStartScheduler+0xdc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <xPortStartScheduler+0xdc>)
 80056d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056d6:	f000 f8b9 	bl	800584c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <xPortStartScheduler+0xe0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056e0:	f7ff ff92 	bl	8005608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056e4:	f7ff fd7c 	bl	80051e0 <vTaskSwitchContext>
	prvTaskExitError();
 80056e8:	f7ff ff4c 	bl	8005584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	e000e400 	.word	0xe000e400
 80056fc:	20000604 	.word	0x20000604
 8005700:	20000608 	.word	0x20000608
 8005704:	e000ed20 	.word	0xe000ed20
 8005708:	20000028 	.word	0x20000028

0800570c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	607b      	str	r3, [r7, #4]
}
 8005724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <vPortEnterCritical+0x58>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <vPortEnterCritical+0x58>)
 800572e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <vPortEnterCritical+0x58>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10f      	bne.n	8005758 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <vPortEnterCritical+0x5c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <vPortEnterCritical+0x4c>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <vPortEnterCritical+0x4a>
	}
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000028 	.word	0x20000028
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <vPortExitCritical+0x4c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <vPortExitCritical+0x24>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	607b      	str	r3, [r7, #4]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <vPortExitCritical+0x4c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <vPortExitCritical+0x4c>)
 8005798:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <vPortExitCritical+0x4c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <vPortExitCritical+0x42>
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	20000028 	.word	0x20000028
 80057bc:	00000000 	.word	0x00000000

080057c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057c0:	f3ef 8009 	mrs	r0, PSP
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <pxCurrentTCBConst>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057d0:	6010      	str	r0, [r2, #0]
 80057d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057da:	f380 8811 	msr	BASEPRI, r0
 80057de:	f7ff fcff 	bl	80051e0 <vTaskSwitchContext>
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	6808      	ldr	r0, [r1, #0]
 80057f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057f6:	f380 8809 	msr	PSP, r0
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	4770      	bx	lr

08005800 <pxCurrentTCBConst>:
 8005800:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005822:	f7ff fc1f 	bl	8005064 <xTaskIncrementTick>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <SysTick_Handler+0x40>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <vPortSetupTimerInterrupt+0x30>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <vPortSetupTimerInterrupt+0x38>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a09      	ldr	r2, [pc, #36]	; (8005888 <vPortSetupTimerInterrupt+0x3c>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <vPortSetupTimerInterrupt+0x40>)
 800586a:	3b01      	subs	r3, #1
 800586c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800586e:	4b03      	ldr	r3, [pc, #12]	; (800587c <vPortSetupTimerInterrupt+0x30>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	e000e010 	.word	0xe000e010
 8005880:	e000e018 	.word	0xe000e018
 8005884:	2000001c 	.word	0x2000001c
 8005888:	10624dd3 	.word	0x10624dd3
 800588c:	e000e014 	.word	0xe000e014

08005890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800589c:	f7ff fb38 	bl	8004f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058a0:	4b58      	ldr	r3, [pc, #352]	; (8005a04 <pvPortMalloc+0x174>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058a8:	f000 f910 	bl	8005acc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058ac:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <pvPortMalloc+0x178>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 808e 	bne.w	80059d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01d      	beq.n	80058fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058c0:	2208      	movs	r2, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d014      	beq.n	80058fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	3308      	adds	r3, #8
 80058da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <pvPortMalloc+0x6c>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	617b      	str	r3, [r7, #20]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d069      	beq.n	80059d6 <pvPortMalloc+0x146>
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <pvPortMalloc+0x17c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d864      	bhi.n	80059d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800590c:	4b40      	ldr	r3, [pc, #256]	; (8005a10 <pvPortMalloc+0x180>)
 800590e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005910:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <pvPortMalloc+0x180>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005916:	e004      	b.n	8005922 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d903      	bls.n	8005934 <pvPortMalloc+0xa4>
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f1      	bne.n	8005918 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005934:	4b33      	ldr	r3, [pc, #204]	; (8005a04 <pvPortMalloc+0x174>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	429a      	cmp	r2, r3
 800593c:	d04b      	beq.n	80059d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2208      	movs	r2, #8
 8005944:	4413      	add	r3, r2
 8005946:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	2308      	movs	r3, #8
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	429a      	cmp	r2, r3
 800595e:	d91f      	bls.n	80059a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <pvPortMalloc+0xf8>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	613b      	str	r3, [r7, #16]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f000 f8f8 	bl	8005b90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <pvPortMalloc+0x17c>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <pvPortMalloc+0x17c>)
 80059ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ae:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <pvPortMalloc+0x17c>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <pvPortMalloc+0x184>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d203      	bcs.n	80059c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <pvPortMalloc+0x17c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <pvPortMalloc+0x184>)
 80059c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <pvPortMalloc+0x178>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059d6:	f7ff faa9 	bl	8004f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <pvPortMalloc+0x16a>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <pvPortMalloc+0x168>
	return pvReturn;
 80059fa:	69fb      	ldr	r3, [r7, #28]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3728      	adds	r7, #40	; 0x28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20001214 	.word	0x20001214
 8005a08:	20001220 	.word	0x20001220
 8005a0c:	20001218 	.word	0x20001218
 8005a10:	2000120c 	.word	0x2000120c
 8005a14:	2000121c 	.word	0x2000121c

08005a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d048      	beq.n	8005abc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	425b      	negs	r3, r3
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4413      	add	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4b21      	ldr	r3, [pc, #132]	; (8005ac4 <vPortFree+0xac>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <vPortFree+0x44>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <vPortFree+0x62>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60bb      	str	r3, [r7, #8]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vPortFree+0xac>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d019      	beq.n	8005abc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d115      	bne.n	8005abc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <vPortFree+0xac>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005aa0:	f7ff fa36 	bl	8004f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <vPortFree+0xb0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	4a06      	ldr	r2, [pc, #24]	; (8005ac8 <vPortFree+0xb0>)
 8005ab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ab2:	6938      	ldr	r0, [r7, #16]
 8005ab4:	f000 f86c 	bl	8005b90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ab8:	f7ff fa38 	bl	8004f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005abc:	bf00      	nop
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20001220 	.word	0x20001220
 8005ac8:	20001218 	.word	0x20001218

08005acc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ad2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ad6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <prvHeapInit+0xac>)
 8005ada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3307      	adds	r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <prvHeapInit+0xac>)
 8005afc:	4413      	add	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b04:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <prvHeapInit+0xb0>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <prvHeapInit+0xb0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b18:	2208      	movs	r2, #8
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0307 	bic.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <prvHeapInit+0xb4>)
 8005b2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <prvHeapInit+0xb4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <prvHeapInit+0xb4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <prvHeapInit+0xb4>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <prvHeapInit+0xb8>)
 8005b5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <prvHeapInit+0xbc>)
 8005b62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <prvHeapInit+0xc0>)
 8005b66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	2000060c 	.word	0x2000060c
 8005b7c:	2000120c 	.word	0x2000120c
 8005b80:	20001214 	.word	0x20001214
 8005b84:	2000121c 	.word	0x2000121c
 8005b88:	20001218 	.word	0x20001218
 8005b8c:	20001220 	.word	0x20001220

08005b90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b98:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <prvInsertBlockIntoFreeList+0xa8>)
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e002      	b.n	8005ba4 <prvInsertBlockIntoFreeList+0x14>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d8f7      	bhi.n	8005b9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d108      	bne.n	8005bd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d118      	bne.n	8005c18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <prvInsertBlockIntoFreeList+0xac>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d00d      	beq.n	8005c0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	441a      	add	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e008      	b.n	8005c20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <prvInsertBlockIntoFreeList+0xac>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e003      	b.n	8005c20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d002      	beq.n	8005c2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	2000120c 	.word	0x2000120c
 8005c3c:	20001214 	.word	0x20001214

08005c40 <siprintf>:
 8005c40:	b40e      	push	{r1, r2, r3}
 8005c42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c46:	b500      	push	{lr}
 8005c48:	b09c      	sub	sp, #112	; 0x70
 8005c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c4c:	9002      	str	r0, [sp, #8]
 8005c4e:	9006      	str	r0, [sp, #24]
 8005c50:	9107      	str	r1, [sp, #28]
 8005c52:	9104      	str	r1, [sp, #16]
 8005c54:	4808      	ldr	r0, [pc, #32]	; (8005c78 <siprintf+0x38>)
 8005c56:	4909      	ldr	r1, [pc, #36]	; (8005c7c <siprintf+0x3c>)
 8005c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5c:	9105      	str	r1, [sp, #20]
 8005c5e:	6800      	ldr	r0, [r0, #0]
 8005c60:	a902      	add	r1, sp, #8
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f000 f9f2 	bl	800604c <_svfiprintf_r>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	9b02      	ldr	r3, [sp, #8]
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	b01c      	add	sp, #112	; 0x70
 8005c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c74:	b003      	add	sp, #12
 8005c76:	4770      	bx	lr
 8005c78:	20000078 	.word	0x20000078
 8005c7c:	ffff0208 	.word	0xffff0208

08005c80 <memset>:
 8005c80:	4603      	mov	r3, r0
 8005c82:	4402      	add	r2, r0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memset+0xa>
 8005c88:	4770      	bx	lr
 8005c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8e:	e7f9      	b.n	8005c84 <memset+0x4>

08005c90 <_reclaim_reent>:
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <_reclaim_reent+0xa8>)
 8005c92:	b570      	push	{r4, r5, r6, lr}
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4604      	mov	r4, r0
 8005c98:	4283      	cmp	r3, r0
 8005c9a:	d04b      	beq.n	8005d34 <_reclaim_reent+0xa4>
 8005c9c:	69c3      	ldr	r3, [r0, #28]
 8005c9e:	b143      	cbz	r3, 8005cb2 <_reclaim_reent+0x22>
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d144      	bne.n	8005d30 <_reclaim_reent+0xa0>
 8005ca6:	69e3      	ldr	r3, [r4, #28]
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	b111      	cbz	r1, 8005cb2 <_reclaim_reent+0x22>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f87f 	bl	8005db0 <_free_r>
 8005cb2:	6961      	ldr	r1, [r4, #20]
 8005cb4:	b111      	cbz	r1, 8005cbc <_reclaim_reent+0x2c>
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f87a 	bl	8005db0 <_free_r>
 8005cbc:	69e1      	ldr	r1, [r4, #28]
 8005cbe:	b111      	cbz	r1, 8005cc6 <_reclaim_reent+0x36>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 f875 	bl	8005db0 <_free_r>
 8005cc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005cc8:	b111      	cbz	r1, 8005cd0 <_reclaim_reent+0x40>
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f870 	bl	8005db0 <_free_r>
 8005cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd2:	b111      	cbz	r1, 8005cda <_reclaim_reent+0x4a>
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 f86b 	bl	8005db0 <_free_r>
 8005cda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005cdc:	b111      	cbz	r1, 8005ce4 <_reclaim_reent+0x54>
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 f866 	bl	8005db0 <_free_r>
 8005ce4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ce6:	b111      	cbz	r1, 8005cee <_reclaim_reent+0x5e>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 f861 	bl	8005db0 <_free_r>
 8005cee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005cf0:	b111      	cbz	r1, 8005cf8 <_reclaim_reent+0x68>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f85c 	bl	8005db0 <_free_r>
 8005cf8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005cfa:	b111      	cbz	r1, 8005d02 <_reclaim_reent+0x72>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 f857 	bl	8005db0 <_free_r>
 8005d02:	6a23      	ldr	r3, [r4, #32]
 8005d04:	b1b3      	cbz	r3, 8005d34 <_reclaim_reent+0xa4>
 8005d06:	4620      	mov	r0, r4
 8005d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d0c:	4718      	bx	r3
 8005d0e:	5949      	ldr	r1, [r1, r5]
 8005d10:	b941      	cbnz	r1, 8005d24 <_reclaim_reent+0x94>
 8005d12:	3504      	adds	r5, #4
 8005d14:	69e3      	ldr	r3, [r4, #28]
 8005d16:	2d80      	cmp	r5, #128	; 0x80
 8005d18:	68d9      	ldr	r1, [r3, #12]
 8005d1a:	d1f8      	bne.n	8005d0e <_reclaim_reent+0x7e>
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 f847 	bl	8005db0 <_free_r>
 8005d22:	e7c0      	b.n	8005ca6 <_reclaim_reent+0x16>
 8005d24:	680e      	ldr	r6, [r1, #0]
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 f842 	bl	8005db0 <_free_r>
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	e7ef      	b.n	8005d10 <_reclaim_reent+0x80>
 8005d30:	2500      	movs	r5, #0
 8005d32:	e7ef      	b.n	8005d14 <_reclaim_reent+0x84>
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	bf00      	nop
 8005d38:	20000078 	.word	0x20000078

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000078 	.word	0x20000078

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	4d0c      	ldr	r5, [pc, #48]	; (8005d80 <__libc_init_array+0x38>)
 8005d4e:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d50:	1b64      	subs	r4, r4, r5
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	f000 fc7a 	bl	8006650 <_init>
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4d0a      	ldr	r5, [pc, #40]	; (8005d88 <__libc_init_array+0x40>)
 8005d60:	4c0a      	ldr	r4, [pc, #40]	; (8005d8c <__libc_init_array+0x44>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08006808 	.word	0x08006808
 8005d84:	08006808 	.word	0x08006808
 8005d88:	08006808 	.word	0x08006808
 8005d8c:	0800680c 	.word	0x0800680c

08005d90 <__retarget_lock_acquire_recursive>:
 8005d90:	4770      	bx	lr

08005d92 <__retarget_lock_release_recursive>:
 8005d92:	4770      	bx	lr

08005d94 <memcpy>:
 8005d94:	440a      	add	r2, r1
 8005d96:	4291      	cmp	r1, r2
 8005d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d9c:	d100      	bne.n	8005da0 <memcpy+0xc>
 8005d9e:	4770      	bx	lr
 8005da0:	b510      	push	{r4, lr}
 8005da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da6:	4291      	cmp	r1, r2
 8005da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dac:	d1f9      	bne.n	8005da2 <memcpy+0xe>
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <_free_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4605      	mov	r5, r0
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d040      	beq.n	8005e3a <_free_r+0x8a>
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f0c      	subs	r4, r1, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfb8      	it	lt
 8005dc2:	18e4      	addlt	r4, r4, r3
 8005dc4:	f000 f8dc 	bl	8005f80 <__malloc_lock>
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <_free_r+0x8c>)
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	b933      	cbnz	r3, 8005ddc <_free_r+0x2c>
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6014      	str	r4, [r2, #0]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd8:	f000 b8d8 	b.w	8005f8c <__malloc_unlock>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d908      	bls.n	8005df2 <_free_r+0x42>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	1821      	adds	r1, r4, r0
 8005de4:	428b      	cmp	r3, r1
 8005de6:	bf01      	itttt	eq
 8005de8:	6819      	ldreq	r1, [r3, #0]
 8005dea:	685b      	ldreq	r3, [r3, #4]
 8005dec:	1809      	addeq	r1, r1, r0
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	e7ed      	b.n	8005dce <_free_r+0x1e>
 8005df2:	461a      	mov	r2, r3
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b10b      	cbz	r3, 8005dfc <_free_r+0x4c>
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x42>
 8005dfc:	6811      	ldr	r1, [r2, #0]
 8005dfe:	1850      	adds	r0, r2, r1
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x6c>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	4401      	add	r1, r0
 8005e08:	1850      	adds	r0, r2, r1
 8005e0a:	4283      	cmp	r3, r0
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	d1e0      	bne.n	8005dd2 <_free_r+0x22>
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4408      	add	r0, r1
 8005e16:	6010      	str	r0, [r2, #0]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	e7da      	b.n	8005dd2 <_free_r+0x22>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x74>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	e7d6      	b.n	8005dd2 <_free_r+0x22>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	1821      	adds	r1, r4, r0
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf01      	itttt	eq
 8005e2c:	6819      	ldreq	r1, [r3, #0]
 8005e2e:	685b      	ldreq	r3, [r3, #4]
 8005e30:	1809      	addeq	r1, r1, r0
 8005e32:	6021      	streq	r1, [r4, #0]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6054      	str	r4, [r2, #4]
 8005e38:	e7cb      	b.n	8005dd2 <_free_r+0x22>
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20001364 	.word	0x20001364

08005e40 <sbrk_aligned>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4e0e      	ldr	r6, [pc, #56]	; (8005e7c <sbrk_aligned+0x3c>)
 8005e44:	460c      	mov	r4, r1
 8005e46:	6831      	ldr	r1, [r6, #0]
 8005e48:	4605      	mov	r5, r0
 8005e4a:	b911      	cbnz	r1, 8005e52 <sbrk_aligned+0x12>
 8005e4c:	f000 fbaa 	bl	80065a4 <_sbrk_r>
 8005e50:	6030      	str	r0, [r6, #0]
 8005e52:	4621      	mov	r1, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 fba5 	bl	80065a4 <_sbrk_r>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d00a      	beq.n	8005e74 <sbrk_aligned+0x34>
 8005e5e:	1cc4      	adds	r4, r0, #3
 8005e60:	f024 0403 	bic.w	r4, r4, #3
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d007      	beq.n	8005e78 <sbrk_aligned+0x38>
 8005e68:	1a21      	subs	r1, r4, r0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fb9a 	bl	80065a4 <_sbrk_r>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d101      	bne.n	8005e78 <sbrk_aligned+0x38>
 8005e74:	f04f 34ff 	mov.w	r4, #4294967295
 8005e78:	4620      	mov	r0, r4
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	20001368 	.word	0x20001368

08005e80 <_malloc_r>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	1ccd      	adds	r5, r1, #3
 8005e86:	f025 0503 	bic.w	r5, r5, #3
 8005e8a:	3508      	adds	r5, #8
 8005e8c:	2d0c      	cmp	r5, #12
 8005e8e:	bf38      	it	cc
 8005e90:	250c      	movcc	r5, #12
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	4607      	mov	r7, r0
 8005e96:	db01      	blt.n	8005e9c <_malloc_r+0x1c>
 8005e98:	42a9      	cmp	r1, r5
 8005e9a:	d905      	bls.n	8005ea8 <_malloc_r+0x28>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f7c <_malloc_r+0xfc>
 8005eac:	f000 f868 	bl	8005f80 <__malloc_lock>
 8005eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb4:	461c      	mov	r4, r3
 8005eb6:	bb5c      	cbnz	r4, 8005f10 <_malloc_r+0x90>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f7ff ffc0 	bl	8005e40 <sbrk_aligned>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	d155      	bne.n	8005f72 <_malloc_r+0xf2>
 8005ec6:	f8d8 4000 	ldr.w	r4, [r8]
 8005eca:	4626      	mov	r6, r4
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	d145      	bne.n	8005f5c <_malloc_r+0xdc>
 8005ed0:	2c00      	cmp	r4, #0
 8005ed2:	d048      	beq.n	8005f66 <_malloc_r+0xe6>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4638      	mov	r0, r7
 8005eda:	eb04 0903 	add.w	r9, r4, r3
 8005ede:	f000 fb61 	bl	80065a4 <_sbrk_r>
 8005ee2:	4581      	cmp	r9, r0
 8005ee4:	d13f      	bne.n	8005f66 <_malloc_r+0xe6>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	4638      	mov	r0, r7
 8005eea:	1a6d      	subs	r5, r5, r1
 8005eec:	4629      	mov	r1, r5
 8005eee:	f7ff ffa7 	bl	8005e40 <sbrk_aligned>
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d037      	beq.n	8005f66 <_malloc_r+0xe6>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	442b      	add	r3, r5
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	f8d8 3000 	ldr.w	r3, [r8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d038      	beq.n	8005f76 <_malloc_r+0xf6>
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	42a2      	cmp	r2, r4
 8005f08:	d12b      	bne.n	8005f62 <_malloc_r+0xe2>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	e00f      	b.n	8005f30 <_malloc_r+0xb0>
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	1b52      	subs	r2, r2, r5
 8005f14:	d41f      	bmi.n	8005f56 <_malloc_r+0xd6>
 8005f16:	2a0b      	cmp	r2, #11
 8005f18:	d917      	bls.n	8005f4a <_malloc_r+0xca>
 8005f1a:	1961      	adds	r1, r4, r5
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	6025      	str	r5, [r4, #0]
 8005f20:	bf18      	it	ne
 8005f22:	6059      	strne	r1, [r3, #4]
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	bf08      	it	eq
 8005f28:	f8c8 1000 	streq.w	r1, [r8]
 8005f2c:	5162      	str	r2, [r4, r5]
 8005f2e:	604b      	str	r3, [r1, #4]
 8005f30:	4638      	mov	r0, r7
 8005f32:	f104 060b 	add.w	r6, r4, #11
 8005f36:	f000 f829 	bl	8005f8c <__malloc_unlock>
 8005f3a:	f026 0607 	bic.w	r6, r6, #7
 8005f3e:	1d23      	adds	r3, r4, #4
 8005f40:	1af2      	subs	r2, r6, r3
 8005f42:	d0ae      	beq.n	8005ea2 <_malloc_r+0x22>
 8005f44:	1b9b      	subs	r3, r3, r6
 8005f46:	50a3      	str	r3, [r4, r2]
 8005f48:	e7ab      	b.n	8005ea2 <_malloc_r+0x22>
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	d1dd      	bne.n	8005f0c <_malloc_r+0x8c>
 8005f50:	f8c8 2000 	str.w	r2, [r8]
 8005f54:	e7ec      	b.n	8005f30 <_malloc_r+0xb0>
 8005f56:	4623      	mov	r3, r4
 8005f58:	6864      	ldr	r4, [r4, #4]
 8005f5a:	e7ac      	b.n	8005eb6 <_malloc_r+0x36>
 8005f5c:	4634      	mov	r4, r6
 8005f5e:	6876      	ldr	r6, [r6, #4]
 8005f60:	e7b4      	b.n	8005ecc <_malloc_r+0x4c>
 8005f62:	4613      	mov	r3, r2
 8005f64:	e7cc      	b.n	8005f00 <_malloc_r+0x80>
 8005f66:	230c      	movs	r3, #12
 8005f68:	4638      	mov	r0, r7
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	f000 f80e 	bl	8005f8c <__malloc_unlock>
 8005f70:	e797      	b.n	8005ea2 <_malloc_r+0x22>
 8005f72:	6025      	str	r5, [r4, #0]
 8005f74:	e7dc      	b.n	8005f30 <_malloc_r+0xb0>
 8005f76:	605b      	str	r3, [r3, #4]
 8005f78:	deff      	udf	#255	; 0xff
 8005f7a:	bf00      	nop
 8005f7c:	20001364 	.word	0x20001364

08005f80 <__malloc_lock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__malloc_lock+0x8>)
 8005f82:	f7ff bf05 	b.w	8005d90 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	20001360 	.word	0x20001360

08005f8c <__malloc_unlock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__malloc_unlock+0x8>)
 8005f8e:	f7ff bf00 	b.w	8005d92 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	20001360 	.word	0x20001360

08005f98 <__ssputs_r>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	461f      	mov	r7, r3
 8005f9e:	688e      	ldr	r6, [r1, #8]
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	42be      	cmp	r6, r7
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	4690      	mov	r8, r2
 8005fa8:	680b      	ldr	r3, [r1, #0]
 8005faa:	d82c      	bhi.n	8006006 <__ssputs_r+0x6e>
 8005fac:	898a      	ldrh	r2, [r1, #12]
 8005fae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb2:	d026      	beq.n	8006002 <__ssputs_r+0x6a>
 8005fb4:	6965      	ldr	r5, [r4, #20]
 8005fb6:	6909      	ldr	r1, [r1, #16]
 8005fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fbc:	eba3 0901 	sub.w	r9, r3, r1
 8005fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc4:	1c7b      	adds	r3, r7, #1
 8005fc6:	444b      	add	r3, r9
 8005fc8:	106d      	asrs	r5, r5, #1
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	bf38      	it	cc
 8005fce:	461d      	movcc	r5, r3
 8005fd0:	0553      	lsls	r3, r2, #21
 8005fd2:	d527      	bpl.n	8006024 <__ssputs_r+0x8c>
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7ff ff53 	bl	8005e80 <_malloc_r>
 8005fda:	4606      	mov	r6, r0
 8005fdc:	b360      	cbz	r0, 8006038 <__ssputs_r+0xa0>
 8005fde:	464a      	mov	r2, r9
 8005fe0:	6921      	ldr	r1, [r4, #16]
 8005fe2:	f7ff fed7 	bl	8005d94 <memcpy>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	6126      	str	r6, [r4, #16]
 8005ff4:	444e      	add	r6, r9
 8005ff6:	6026      	str	r6, [r4, #0]
 8005ff8:	463e      	mov	r6, r7
 8005ffa:	6165      	str	r5, [r4, #20]
 8005ffc:	eba5 0509 	sub.w	r5, r5, r9
 8006000:	60a5      	str	r5, [r4, #8]
 8006002:	42be      	cmp	r6, r7
 8006004:	d900      	bls.n	8006008 <__ssputs_r+0x70>
 8006006:	463e      	mov	r6, r7
 8006008:	4632      	mov	r2, r6
 800600a:	4641      	mov	r1, r8
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	f000 faaf 	bl	8006570 <memmove>
 8006012:	2000      	movs	r0, #0
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	1b9b      	subs	r3, r3, r6
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4433      	add	r3, r6
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	462a      	mov	r2, r5
 8006026:	f000 fadb 	bl	80065e0 <_realloc_r>
 800602a:	4606      	mov	r6, r0
 800602c:	2800      	cmp	r0, #0
 800602e:	d1e0      	bne.n	8005ff2 <__ssputs_r+0x5a>
 8006030:	4650      	mov	r0, sl
 8006032:	6921      	ldr	r1, [r4, #16]
 8006034:	f7ff febc 	bl	8005db0 <_free_r>
 8006038:	230c      	movs	r3, #12
 800603a:	f8ca 3000 	str.w	r3, [sl]
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006048:	81a3      	strh	r3, [r4, #12]
 800604a:	e7e9      	b.n	8006020 <__ssputs_r+0x88>

0800604c <_svfiprintf_r>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	4698      	mov	r8, r3
 8006052:	898b      	ldrh	r3, [r1, #12]
 8006054:	4607      	mov	r7, r0
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	460d      	mov	r5, r1
 800605a:	4614      	mov	r4, r2
 800605c:	b09d      	sub	sp, #116	; 0x74
 800605e:	d50e      	bpl.n	800607e <_svfiprintf_r+0x32>
 8006060:	690b      	ldr	r3, [r1, #16]
 8006062:	b963      	cbnz	r3, 800607e <_svfiprintf_r+0x32>
 8006064:	2140      	movs	r1, #64	; 0x40
 8006066:	f7ff ff0b 	bl	8005e80 <_malloc_r>
 800606a:	6028      	str	r0, [r5, #0]
 800606c:	6128      	str	r0, [r5, #16]
 800606e:	b920      	cbnz	r0, 800607a <_svfiprintf_r+0x2e>
 8006070:	230c      	movs	r3, #12
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e0d0      	b.n	800621c <_svfiprintf_r+0x1d0>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	616b      	str	r3, [r5, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9309      	str	r3, [sp, #36]	; 0x24
 8006082:	2320      	movs	r3, #32
 8006084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006088:	2330      	movs	r3, #48	; 0x30
 800608a:	f04f 0901 	mov.w	r9, #1
 800608e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006092:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006234 <_svfiprintf_r+0x1e8>
 8006096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800609a:	4623      	mov	r3, r4
 800609c:	469a      	mov	sl, r3
 800609e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a2:	b10a      	cbz	r2, 80060a8 <_svfiprintf_r+0x5c>
 80060a4:	2a25      	cmp	r2, #37	; 0x25
 80060a6:	d1f9      	bne.n	800609c <_svfiprintf_r+0x50>
 80060a8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ac:	d00b      	beq.n	80060c6 <_svfiprintf_r+0x7a>
 80060ae:	465b      	mov	r3, fp
 80060b0:	4622      	mov	r2, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ff6f 	bl	8005f98 <__ssputs_r>
 80060ba:	3001      	adds	r0, #1
 80060bc:	f000 80a9 	beq.w	8006212 <_svfiprintf_r+0x1c6>
 80060c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c2:	445a      	add	r2, fp
 80060c4:	9209      	str	r2, [sp, #36]	; 0x24
 80060c6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80a1 	beq.w	8006212 <_svfiprintf_r+0x1c6>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295
 80060d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060da:	f10a 0a01 	add.w	sl, sl, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e6:	931a      	str	r3, [sp, #104]	; 0x68
 80060e8:	4654      	mov	r4, sl
 80060ea:	2205      	movs	r2, #5
 80060ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f0:	4850      	ldr	r0, [pc, #320]	; (8006234 <_svfiprintf_r+0x1e8>)
 80060f2:	f000 fa67 	bl	80065c4 <memchr>
 80060f6:	9a04      	ldr	r2, [sp, #16]
 80060f8:	b9d8      	cbnz	r0, 8006132 <_svfiprintf_r+0xe6>
 80060fa:	06d0      	lsls	r0, r2, #27
 80060fc:	bf44      	itt	mi
 80060fe:	2320      	movmi	r3, #32
 8006100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006104:	0711      	lsls	r1, r2, #28
 8006106:	bf44      	itt	mi
 8006108:	232b      	movmi	r3, #43	; 0x2b
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610e:	f89a 3000 	ldrb.w	r3, [sl]
 8006112:	2b2a      	cmp	r3, #42	; 0x2a
 8006114:	d015      	beq.n	8006142 <_svfiprintf_r+0xf6>
 8006116:	4654      	mov	r4, sl
 8006118:	2000      	movs	r0, #0
 800611a:	f04f 0c0a 	mov.w	ip, #10
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	4621      	mov	r1, r4
 8006122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006126:	3b30      	subs	r3, #48	; 0x30
 8006128:	2b09      	cmp	r3, #9
 800612a:	d94d      	bls.n	80061c8 <_svfiprintf_r+0x17c>
 800612c:	b1b0      	cbz	r0, 800615c <_svfiprintf_r+0x110>
 800612e:	9207      	str	r2, [sp, #28]
 8006130:	e014      	b.n	800615c <_svfiprintf_r+0x110>
 8006132:	eba0 0308 	sub.w	r3, r0, r8
 8006136:	fa09 f303 	lsl.w	r3, r9, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	46a2      	mov	sl, r4
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	e7d2      	b.n	80060e8 <_svfiprintf_r+0x9c>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9103      	str	r1, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfbb      	ittet	lt
 800614e:	425b      	neglt	r3, r3
 8006150:	f042 0202 	orrlt.w	r2, r2, #2
 8006154:	9307      	strge	r3, [sp, #28]
 8006156:	9307      	strlt	r3, [sp, #28]
 8006158:	bfb8      	it	lt
 800615a:	9204      	strlt	r2, [sp, #16]
 800615c:	7823      	ldrb	r3, [r4, #0]
 800615e:	2b2e      	cmp	r3, #46	; 0x2e
 8006160:	d10c      	bne.n	800617c <_svfiprintf_r+0x130>
 8006162:	7863      	ldrb	r3, [r4, #1]
 8006164:	2b2a      	cmp	r3, #42	; 0x2a
 8006166:	d134      	bne.n	80061d2 <_svfiprintf_r+0x186>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	3402      	adds	r4, #2
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	9203      	str	r2, [sp, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	bfb8      	it	lt
 8006176:	f04f 33ff 	movlt.w	r3, #4294967295
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006238 <_svfiprintf_r+0x1ec>
 8006180:	2203      	movs	r2, #3
 8006182:	4650      	mov	r0, sl
 8006184:	7821      	ldrb	r1, [r4, #0]
 8006186:	f000 fa1d 	bl	80065c4 <memchr>
 800618a:	b138      	cbz	r0, 800619c <_svfiprintf_r+0x150>
 800618c:	2240      	movs	r2, #64	; 0x40
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	eba0 000a 	sub.w	r0, r0, sl
 8006194:	4082      	lsls	r2, r0
 8006196:	4313      	orrs	r3, r2
 8006198:	3401      	adds	r4, #1
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a0:	2206      	movs	r2, #6
 80061a2:	4826      	ldr	r0, [pc, #152]	; (800623c <_svfiprintf_r+0x1f0>)
 80061a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061a8:	f000 fa0c 	bl	80065c4 <memchr>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d038      	beq.n	8006222 <_svfiprintf_r+0x1d6>
 80061b0:	4b23      	ldr	r3, [pc, #140]	; (8006240 <_svfiprintf_r+0x1f4>)
 80061b2:	bb1b      	cbnz	r3, 80061fc <_svfiprintf_r+0x1b0>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	3307      	adds	r3, #7
 80061b8:	f023 0307 	bic.w	r3, r3, #7
 80061bc:	3308      	adds	r3, #8
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c2:	4433      	add	r3, r6
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	e768      	b.n	800609a <_svfiprintf_r+0x4e>
 80061c8:	460c      	mov	r4, r1
 80061ca:	2001      	movs	r0, #1
 80061cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d0:	e7a6      	b.n	8006120 <_svfiprintf_r+0xd4>
 80061d2:	2300      	movs	r3, #0
 80061d4:	f04f 0c0a 	mov.w	ip, #10
 80061d8:	4619      	mov	r1, r3
 80061da:	3401      	adds	r4, #1
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	4620      	mov	r0, r4
 80061e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e4:	3a30      	subs	r2, #48	; 0x30
 80061e6:	2a09      	cmp	r2, #9
 80061e8:	d903      	bls.n	80061f2 <_svfiprintf_r+0x1a6>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0c6      	beq.n	800617c <_svfiprintf_r+0x130>
 80061ee:	9105      	str	r1, [sp, #20]
 80061f0:	e7c4      	b.n	800617c <_svfiprintf_r+0x130>
 80061f2:	4604      	mov	r4, r0
 80061f4:	2301      	movs	r3, #1
 80061f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fa:	e7f0      	b.n	80061de <_svfiprintf_r+0x192>
 80061fc:	ab03      	add	r3, sp, #12
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	462a      	mov	r2, r5
 8006202:	4638      	mov	r0, r7
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <_svfiprintf_r+0x1f8>)
 8006206:	a904      	add	r1, sp, #16
 8006208:	f3af 8000 	nop.w
 800620c:	1c42      	adds	r2, r0, #1
 800620e:	4606      	mov	r6, r0
 8006210:	d1d6      	bne.n	80061c0 <_svfiprintf_r+0x174>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	065b      	lsls	r3, r3, #25
 8006216:	f53f af2d 	bmi.w	8006074 <_svfiprintf_r+0x28>
 800621a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800621c:	b01d      	add	sp, #116	; 0x74
 800621e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006222:	ab03      	add	r3, sp, #12
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	462a      	mov	r2, r5
 8006228:	4638      	mov	r0, r7
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <_svfiprintf_r+0x1f8>)
 800622c:	a904      	add	r1, sp, #16
 800622e:	f000 f87d 	bl	800632c <_printf_i>
 8006232:	e7eb      	b.n	800620c <_svfiprintf_r+0x1c0>
 8006234:	080067d2 	.word	0x080067d2
 8006238:	080067d8 	.word	0x080067d8
 800623c:	080067dc 	.word	0x080067dc
 8006240:	00000000 	.word	0x00000000
 8006244:	08005f99 	.word	0x08005f99

08006248 <_printf_common>:
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	4616      	mov	r6, r2
 800624e:	4699      	mov	r9, r3
 8006250:	688a      	ldr	r2, [r1, #8]
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	4607      	mov	r7, r0
 8006256:	4293      	cmp	r3, r2
 8006258:	bfb8      	it	lt
 800625a:	4613      	movlt	r3, r2
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006262:	460c      	mov	r4, r1
 8006264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006268:	b10a      	cbz	r2, 800626e <_printf_common+0x26>
 800626a:	3301      	adds	r3, #1
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	0699      	lsls	r1, r3, #26
 8006272:	bf42      	ittt	mi
 8006274:	6833      	ldrmi	r3, [r6, #0]
 8006276:	3302      	addmi	r3, #2
 8006278:	6033      	strmi	r3, [r6, #0]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	f015 0506 	ands.w	r5, r5, #6
 8006280:	d106      	bne.n	8006290 <_printf_common+0x48>
 8006282:	f104 0a19 	add.w	sl, r4, #25
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	6832      	ldr	r2, [r6, #0]
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	42ab      	cmp	r3, r5
 800628e:	dc2b      	bgt.n	80062e8 <_printf_common+0xa0>
 8006290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006294:	1e13      	subs	r3, r2, #0
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	bf18      	it	ne
 800629a:	2301      	movne	r3, #1
 800629c:	0692      	lsls	r2, r2, #26
 800629e:	d430      	bmi.n	8006302 <_printf_common+0xba>
 80062a0:	4649      	mov	r1, r9
 80062a2:	4638      	mov	r0, r7
 80062a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d023      	beq.n	80062f6 <_printf_common+0xae>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	f003 0306 	and.w	r3, r3, #6
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	bf14      	ite	ne
 80062ba:	2500      	movne	r5, #0
 80062bc:	6833      	ldreq	r3, [r6, #0]
 80062be:	f04f 0600 	mov.w	r6, #0
 80062c2:	bf08      	it	eq
 80062c4:	68e5      	ldreq	r5, [r4, #12]
 80062c6:	f104 041a 	add.w	r4, r4, #26
 80062ca:	bf08      	it	eq
 80062cc:	1aed      	subeq	r5, r5, r3
 80062ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062d2:	bf08      	it	eq
 80062d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d8:	4293      	cmp	r3, r2
 80062da:	bfc4      	itt	gt
 80062dc:	1a9b      	subgt	r3, r3, r2
 80062de:	18ed      	addgt	r5, r5, r3
 80062e0:	42b5      	cmp	r5, r6
 80062e2:	d11a      	bne.n	800631a <_printf_common+0xd2>
 80062e4:	2000      	movs	r0, #0
 80062e6:	e008      	b.n	80062fa <_printf_common+0xb2>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4652      	mov	r2, sl
 80062ec:	4649      	mov	r1, r9
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c0      	blx	r8
 80062f2:	3001      	adds	r0, #1
 80062f4:	d103      	bne.n	80062fe <_printf_common+0xb6>
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	3501      	adds	r5, #1
 8006300:	e7c1      	b.n	8006286 <_printf_common+0x3e>
 8006302:	2030      	movs	r0, #48	; 0x30
 8006304:	18e1      	adds	r1, r4, r3
 8006306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006310:	4422      	add	r2, r4
 8006312:	3302      	adds	r3, #2
 8006314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006318:	e7c2      	b.n	80062a0 <_printf_common+0x58>
 800631a:	2301      	movs	r3, #1
 800631c:	4622      	mov	r2, r4
 800631e:	4649      	mov	r1, r9
 8006320:	4638      	mov	r0, r7
 8006322:	47c0      	blx	r8
 8006324:	3001      	adds	r0, #1
 8006326:	d0e6      	beq.n	80062f6 <_printf_common+0xae>
 8006328:	3601      	adds	r6, #1
 800632a:	e7d9      	b.n	80062e0 <_printf_common+0x98>

0800632c <_printf_i>:
 800632c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	7e0f      	ldrb	r7, [r1, #24]
 8006332:	4691      	mov	r9, r2
 8006334:	2f78      	cmp	r7, #120	; 0x78
 8006336:	4680      	mov	r8, r0
 8006338:	460c      	mov	r4, r1
 800633a:	469a      	mov	sl, r3
 800633c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800633e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006342:	d807      	bhi.n	8006354 <_printf_i+0x28>
 8006344:	2f62      	cmp	r7, #98	; 0x62
 8006346:	d80a      	bhi.n	800635e <_printf_i+0x32>
 8006348:	2f00      	cmp	r7, #0
 800634a:	f000 80d5 	beq.w	80064f8 <_printf_i+0x1cc>
 800634e:	2f58      	cmp	r7, #88	; 0x58
 8006350:	f000 80c1 	beq.w	80064d6 <_printf_i+0x1aa>
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800635c:	e03a      	b.n	80063d4 <_printf_i+0xa8>
 800635e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006362:	2b15      	cmp	r3, #21
 8006364:	d8f6      	bhi.n	8006354 <_printf_i+0x28>
 8006366:	a101      	add	r1, pc, #4	; (adr r1, 800636c <_printf_i+0x40>)
 8006368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800636c:	080063c5 	.word	0x080063c5
 8006370:	080063d9 	.word	0x080063d9
 8006374:	08006355 	.word	0x08006355
 8006378:	08006355 	.word	0x08006355
 800637c:	08006355 	.word	0x08006355
 8006380:	08006355 	.word	0x08006355
 8006384:	080063d9 	.word	0x080063d9
 8006388:	08006355 	.word	0x08006355
 800638c:	08006355 	.word	0x08006355
 8006390:	08006355 	.word	0x08006355
 8006394:	08006355 	.word	0x08006355
 8006398:	080064df 	.word	0x080064df
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006499 	.word	0x08006499
 80063a4:	08006355 	.word	0x08006355
 80063a8:	08006355 	.word	0x08006355
 80063ac:	08006501 	.word	0x08006501
 80063b0:	08006355 	.word	0x08006355
 80063b4:	08006405 	.word	0x08006405
 80063b8:	08006355 	.word	0x08006355
 80063bc:	08006355 	.word	0x08006355
 80063c0:	080064a1 	.word	0x080064a1
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	1d1a      	adds	r2, r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	602a      	str	r2, [r5, #0]
 80063cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0a0      	b.n	800651a <_printf_i+0x1ee>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	0607      	lsls	r7, r0, #24
 80063de:	f103 0104 	add.w	r1, r3, #4
 80063e2:	6029      	str	r1, [r5, #0]
 80063e4:	d501      	bpl.n	80063ea <_printf_i+0xbe>
 80063e6:	681e      	ldr	r6, [r3, #0]
 80063e8:	e003      	b.n	80063f2 <_printf_i+0xc6>
 80063ea:	0646      	lsls	r6, r0, #25
 80063ec:	d5fb      	bpl.n	80063e6 <_printf_i+0xba>
 80063ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	da03      	bge.n	80063fe <_printf_i+0xd2>
 80063f6:	232d      	movs	r3, #45	; 0x2d
 80063f8:	4276      	negs	r6, r6
 80063fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fe:	230a      	movs	r3, #10
 8006400:	4859      	ldr	r0, [pc, #356]	; (8006568 <_printf_i+0x23c>)
 8006402:	e012      	b.n	800642a <_printf_i+0xfe>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	1d19      	adds	r1, r3, #4
 800640a:	6029      	str	r1, [r5, #0]
 800640c:	0605      	lsls	r5, r0, #24
 800640e:	d501      	bpl.n	8006414 <_printf_i+0xe8>
 8006410:	681e      	ldr	r6, [r3, #0]
 8006412:	e002      	b.n	800641a <_printf_i+0xee>
 8006414:	0641      	lsls	r1, r0, #25
 8006416:	d5fb      	bpl.n	8006410 <_printf_i+0xe4>
 8006418:	881e      	ldrh	r6, [r3, #0]
 800641a:	2f6f      	cmp	r7, #111	; 0x6f
 800641c:	bf0c      	ite	eq
 800641e:	2308      	moveq	r3, #8
 8006420:	230a      	movne	r3, #10
 8006422:	4851      	ldr	r0, [pc, #324]	; (8006568 <_printf_i+0x23c>)
 8006424:	2100      	movs	r1, #0
 8006426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800642a:	6865      	ldr	r5, [r4, #4]
 800642c:	2d00      	cmp	r5, #0
 800642e:	bfa8      	it	ge
 8006430:	6821      	ldrge	r1, [r4, #0]
 8006432:	60a5      	str	r5, [r4, #8]
 8006434:	bfa4      	itt	ge
 8006436:	f021 0104 	bicge.w	r1, r1, #4
 800643a:	6021      	strge	r1, [r4, #0]
 800643c:	b90e      	cbnz	r6, 8006442 <_printf_i+0x116>
 800643e:	2d00      	cmp	r5, #0
 8006440:	d04b      	beq.n	80064da <_printf_i+0x1ae>
 8006442:	4615      	mov	r5, r2
 8006444:	fbb6 f1f3 	udiv	r1, r6, r3
 8006448:	fb03 6711 	mls	r7, r3, r1, r6
 800644c:	5dc7      	ldrb	r7, [r0, r7]
 800644e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006452:	4637      	mov	r7, r6
 8006454:	42bb      	cmp	r3, r7
 8006456:	460e      	mov	r6, r1
 8006458:	d9f4      	bls.n	8006444 <_printf_i+0x118>
 800645a:	2b08      	cmp	r3, #8
 800645c:	d10b      	bne.n	8006476 <_printf_i+0x14a>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	07de      	lsls	r6, r3, #31
 8006462:	d508      	bpl.n	8006476 <_printf_i+0x14a>
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	6861      	ldr	r1, [r4, #4]
 8006468:	4299      	cmp	r1, r3
 800646a:	bfde      	ittt	le
 800646c:	2330      	movle	r3, #48	; 0x30
 800646e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006476:	1b52      	subs	r2, r2, r5
 8006478:	6122      	str	r2, [r4, #16]
 800647a:	464b      	mov	r3, r9
 800647c:	4621      	mov	r1, r4
 800647e:	4640      	mov	r0, r8
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	aa03      	add	r2, sp, #12
 8006486:	f7ff fedf 	bl	8006248 <_printf_common>
 800648a:	3001      	adds	r0, #1
 800648c:	d14a      	bne.n	8006524 <_printf_i+0x1f8>
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	b004      	add	sp, #16
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	f043 0320 	orr.w	r3, r3, #32
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	2778      	movs	r7, #120	; 0x78
 80064a2:	4832      	ldr	r0, [pc, #200]	; (800656c <_printf_i+0x240>)
 80064a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	6829      	ldr	r1, [r5, #0]
 80064ac:	061f      	lsls	r7, r3, #24
 80064ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80064b2:	d402      	bmi.n	80064ba <_printf_i+0x18e>
 80064b4:	065f      	lsls	r7, r3, #25
 80064b6:	bf48      	it	mi
 80064b8:	b2b6      	uxthmi	r6, r6
 80064ba:	07df      	lsls	r7, r3, #31
 80064bc:	bf48      	it	mi
 80064be:	f043 0320 	orrmi.w	r3, r3, #32
 80064c2:	6029      	str	r1, [r5, #0]
 80064c4:	bf48      	it	mi
 80064c6:	6023      	strmi	r3, [r4, #0]
 80064c8:	b91e      	cbnz	r6, 80064d2 <_printf_i+0x1a6>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f023 0320 	bic.w	r3, r3, #32
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2310      	movs	r3, #16
 80064d4:	e7a6      	b.n	8006424 <_printf_i+0xf8>
 80064d6:	4824      	ldr	r0, [pc, #144]	; (8006568 <_printf_i+0x23c>)
 80064d8:	e7e4      	b.n	80064a4 <_printf_i+0x178>
 80064da:	4615      	mov	r5, r2
 80064dc:	e7bd      	b.n	800645a <_printf_i+0x12e>
 80064de:	682b      	ldr	r3, [r5, #0]
 80064e0:	6826      	ldr	r6, [r4, #0]
 80064e2:	1d18      	adds	r0, r3, #4
 80064e4:	6961      	ldr	r1, [r4, #20]
 80064e6:	6028      	str	r0, [r5, #0]
 80064e8:	0635      	lsls	r5, r6, #24
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	d501      	bpl.n	80064f2 <_printf_i+0x1c6>
 80064ee:	6019      	str	r1, [r3, #0]
 80064f0:	e002      	b.n	80064f8 <_printf_i+0x1cc>
 80064f2:	0670      	lsls	r0, r6, #25
 80064f4:	d5fb      	bpl.n	80064ee <_printf_i+0x1c2>
 80064f6:	8019      	strh	r1, [r3, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	4615      	mov	r5, r2
 80064fc:	6123      	str	r3, [r4, #16]
 80064fe:	e7bc      	b.n	800647a <_printf_i+0x14e>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	2100      	movs	r1, #0
 8006504:	1d1a      	adds	r2, r3, #4
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	681d      	ldr	r5, [r3, #0]
 800650a:	6862      	ldr	r2, [r4, #4]
 800650c:	4628      	mov	r0, r5
 800650e:	f000 f859 	bl	80065c4 <memchr>
 8006512:	b108      	cbz	r0, 8006518 <_printf_i+0x1ec>
 8006514:	1b40      	subs	r0, r0, r5
 8006516:	6060      	str	r0, [r4, #4]
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	2300      	movs	r3, #0
 800651e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006522:	e7aa      	b.n	800647a <_printf_i+0x14e>
 8006524:	462a      	mov	r2, r5
 8006526:	4649      	mov	r1, r9
 8006528:	4640      	mov	r0, r8
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	47d0      	blx	sl
 800652e:	3001      	adds	r0, #1
 8006530:	d0ad      	beq.n	800648e <_printf_i+0x162>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	079b      	lsls	r3, r3, #30
 8006536:	d413      	bmi.n	8006560 <_printf_i+0x234>
 8006538:	68e0      	ldr	r0, [r4, #12]
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	4298      	cmp	r0, r3
 800653e:	bfb8      	it	lt
 8006540:	4618      	movlt	r0, r3
 8006542:	e7a6      	b.n	8006492 <_printf_i+0x166>
 8006544:	2301      	movs	r3, #1
 8006546:	4632      	mov	r2, r6
 8006548:	4649      	mov	r1, r9
 800654a:	4640      	mov	r0, r8
 800654c:	47d0      	blx	sl
 800654e:	3001      	adds	r0, #1
 8006550:	d09d      	beq.n	800648e <_printf_i+0x162>
 8006552:	3501      	adds	r5, #1
 8006554:	68e3      	ldr	r3, [r4, #12]
 8006556:	9903      	ldr	r1, [sp, #12]
 8006558:	1a5b      	subs	r3, r3, r1
 800655a:	42ab      	cmp	r3, r5
 800655c:	dcf2      	bgt.n	8006544 <_printf_i+0x218>
 800655e:	e7eb      	b.n	8006538 <_printf_i+0x20c>
 8006560:	2500      	movs	r5, #0
 8006562:	f104 0619 	add.w	r6, r4, #25
 8006566:	e7f5      	b.n	8006554 <_printf_i+0x228>
 8006568:	080067e3 	.word	0x080067e3
 800656c:	080067f4 	.word	0x080067f4

08006570 <memmove>:
 8006570:	4288      	cmp	r0, r1
 8006572:	b510      	push	{r4, lr}
 8006574:	eb01 0402 	add.w	r4, r1, r2
 8006578:	d902      	bls.n	8006580 <memmove+0x10>
 800657a:	4284      	cmp	r4, r0
 800657c:	4623      	mov	r3, r4
 800657e:	d807      	bhi.n	8006590 <memmove+0x20>
 8006580:	1e43      	subs	r3, r0, #1
 8006582:	42a1      	cmp	r1, r4
 8006584:	d008      	beq.n	8006598 <memmove+0x28>
 8006586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800658e:	e7f8      	b.n	8006582 <memmove+0x12>
 8006590:	4601      	mov	r1, r0
 8006592:	4402      	add	r2, r0
 8006594:	428a      	cmp	r2, r1
 8006596:	d100      	bne.n	800659a <memmove+0x2a>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800659e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a2:	e7f7      	b.n	8006594 <memmove+0x24>

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	2300      	movs	r3, #0
 80065a8:	4d05      	ldr	r5, [pc, #20]	; (80065c0 <_sbrk_r+0x1c>)
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fa ff7e 	bl	80014b0 <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	2000135c 	.word	0x2000135c

080065c4 <memchr>:
 80065c4:	4603      	mov	r3, r0
 80065c6:	b510      	push	{r4, lr}
 80065c8:	b2c9      	uxtb	r1, r1
 80065ca:	4402      	add	r2, r0
 80065cc:	4293      	cmp	r3, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	d101      	bne.n	80065d6 <memchr+0x12>
 80065d2:	2000      	movs	r0, #0
 80065d4:	e003      	b.n	80065de <memchr+0x1a>
 80065d6:	7804      	ldrb	r4, [r0, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	428c      	cmp	r4, r1
 80065dc:	d1f6      	bne.n	80065cc <memchr+0x8>
 80065de:	bd10      	pop	{r4, pc}

080065e0 <_realloc_r>:
 80065e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	4680      	mov	r8, r0
 80065e6:	4614      	mov	r4, r2
 80065e8:	460e      	mov	r6, r1
 80065ea:	b921      	cbnz	r1, 80065f6 <_realloc_r+0x16>
 80065ec:	4611      	mov	r1, r2
 80065ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	f7ff bc45 	b.w	8005e80 <_malloc_r>
 80065f6:	b92a      	cbnz	r2, 8006604 <_realloc_r+0x24>
 80065f8:	f7ff fbda 	bl	8005db0 <_free_r>
 80065fc:	4625      	mov	r5, r4
 80065fe:	4628      	mov	r0, r5
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	f000 f81b 	bl	800663e <_malloc_usable_size_r>
 8006608:	4284      	cmp	r4, r0
 800660a:	4607      	mov	r7, r0
 800660c:	d802      	bhi.n	8006614 <_realloc_r+0x34>
 800660e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006612:	d812      	bhi.n	800663a <_realloc_r+0x5a>
 8006614:	4621      	mov	r1, r4
 8006616:	4640      	mov	r0, r8
 8006618:	f7ff fc32 	bl	8005e80 <_malloc_r>
 800661c:	4605      	mov	r5, r0
 800661e:	2800      	cmp	r0, #0
 8006620:	d0ed      	beq.n	80065fe <_realloc_r+0x1e>
 8006622:	42bc      	cmp	r4, r7
 8006624:	4622      	mov	r2, r4
 8006626:	4631      	mov	r1, r6
 8006628:	bf28      	it	cs
 800662a:	463a      	movcs	r2, r7
 800662c:	f7ff fbb2 	bl	8005d94 <memcpy>
 8006630:	4631      	mov	r1, r6
 8006632:	4640      	mov	r0, r8
 8006634:	f7ff fbbc 	bl	8005db0 <_free_r>
 8006638:	e7e1      	b.n	80065fe <_realloc_r+0x1e>
 800663a:	4635      	mov	r5, r6
 800663c:	e7df      	b.n	80065fe <_realloc_r+0x1e>

0800663e <_malloc_usable_size_r>:
 800663e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006642:	1f18      	subs	r0, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	580b      	ldrlt	r3, [r1, r0]
 800664a:	18c0      	addlt	r0, r0, r3
 800664c:	4770      	bx	lr
	...

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
